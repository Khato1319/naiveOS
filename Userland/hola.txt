
0000-sampleCodeModule.elf:     file format elf64-x86-64


Disassembly of section .text:

0000000000400000 <_start>:

int main();

void * memset(void * destiny, int32_t c, uint64_t length);

int _start() {
  400000:	55                   	push   %rbp
  400001:	48 89 e5             	mov    %rsp,%rbp
	//Clean BSS
	memset(&bss, 0, &endOfBinary - &bss);
  400004:	ba 94 5b 40 00       	mov    $0x405b94,%edx
  400009:	b8 00 50 40 00       	mov    $0x405000,%eax
  40000e:	48 29 c2             	sub    %rax,%rdx
  400011:	48 89 d0             	mov    %rdx,%rax
  400014:	48 89 c2             	mov    %rax,%rdx
  400017:	be 00 00 00 00       	mov    $0x0,%esi
  40001c:	bf 00 50 40 00       	mov    $0x405000,%edi
  400021:	e8 0c 00 00 00       	callq  400032 <memset>

	return main();
  400026:	b8 00 00 00 00       	mov    $0x0,%eax
  40002b:	e8 4d 00 00 00       	callq  40007d <main>

}
  400030:	5d                   	pop    %rbp
  400031:	c3                   	retq   

0000000000400032 <memset>:


void * memset(void * destiation, int32_t c, uint64_t length) {
  400032:	55                   	push   %rbp
  400033:	48 89 e5             	mov    %rsp,%rbp
  400036:	48 83 ec 28          	sub    $0x28,%rsp
  40003a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40003e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  400041:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t chr = (uint8_t)c;
  400045:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  400048:	88 45 ff             	mov    %al,-0x1(%rbp)
	char * dst = (char*)destiation;
  40004b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40004f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while(length--)
  400053:	eb 11                	jmp    400066 <memset+0x34>
		dst[length] = chr;
  400055:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400059:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40005d:	48 01 c2             	add    %rax,%rdx
  400060:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  400064:	88 02                	mov    %al,(%rdx)
	while(length--)
  400066:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40006a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40006e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  400072:	48 85 c0             	test   %rax,%rax
  400075:	75 de                	jne    400055 <memset+0x23>

	return destiation;
  400077:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  40007b:	c9                   	leaveq 
  40007c:	c3                   	retq   

000000000040007d <main>:

// static int var1 = 0;
// static int var2 = 0;


int main() {
  40007d:	55                   	push   %rbp
  40007e:	48 89 e5             	mov    %rsp,%rbp
	//All the following code may be removed 
	inputLetter("hola");
  400081:	bf 00 30 40 00       	mov    $0x403000,%edi
  400086:	e8 ff 02 00 00       	callq  40038a <inputLetter>
	theShell();
  40008b:	b8 00 00 00 00       	mov    $0x0,%eax
  400090:	e8 05 1b 00 00       	callq  401b9a <theShell>
	

	return 0xDEADBEEF;
  400095:	b8 ef be ad de       	mov    $0xdeadbeef,%eax
  40009a:	5d                   	pop    %rbp
  40009b:	c3                   	retq   
  40009c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004000a0 <system_write>:
  4000a0:	53                   	push   %rbx
  4000a1:	51                   	push   %rcx
  4000a2:	52                   	push   %rdx
  4000a3:	55                   	push   %rbp
  4000a4:	57                   	push   %rdi
  4000a5:	56                   	push   %rsi
  4000a6:	41 50                	push   %r8
  4000a8:	41 51                	push   %r9
  4000aa:	41 52                	push   %r10
  4000ac:	41 53                	push   %r11
  4000ae:	41 54                	push   %r12
  4000b0:	41 55                	push   %r13
  4000b2:	41 56                	push   %r14
  4000b4:	41 57                	push   %r15
  4000b6:	b8 01 00 00 00       	mov    $0x1,%eax
  4000bb:	cd 80                	int    $0x80
  4000bd:	41 5f                	pop    %r15
  4000bf:	41 5e                	pop    %r14
  4000c1:	41 5d                	pop    %r13
  4000c3:	41 5c                	pop    %r12
  4000c5:	41 5b                	pop    %r11
  4000c7:	41 5a                	pop    %r10
  4000c9:	41 59                	pop    %r9
  4000cb:	41 58                	pop    %r8
  4000cd:	5e                   	pop    %rsi
  4000ce:	5f                   	pop    %rdi
  4000cf:	5d                   	pop    %rbp
  4000d0:	5a                   	pop    %rdx
  4000d1:	59                   	pop    %rcx
  4000d2:	5b                   	pop    %rbx
  4000d3:	c3                   	retq   

00000000004000d4 <system_read>:
  4000d4:	53                   	push   %rbx
  4000d5:	51                   	push   %rcx
  4000d6:	52                   	push   %rdx
  4000d7:	55                   	push   %rbp
  4000d8:	57                   	push   %rdi
  4000d9:	56                   	push   %rsi
  4000da:	41 50                	push   %r8
  4000dc:	41 51                	push   %r9
  4000de:	41 52                	push   %r10
  4000e0:	41 53                	push   %r11
  4000e2:	41 54                	push   %r12
  4000e4:	41 55                	push   %r13
  4000e6:	41 56                	push   %r14
  4000e8:	41 57                	push   %r15
  4000ea:	b8 00 00 00 00       	mov    $0x0,%eax
  4000ef:	cd 80                	int    $0x80
  4000f1:	41 5f                	pop    %r15
  4000f3:	41 5e                	pop    %r14
  4000f5:	41 5d                	pop    %r13
  4000f7:	41 5c                	pop    %r12
  4000f9:	41 5b                	pop    %r11
  4000fb:	41 5a                	pop    %r10
  4000fd:	41 59                	pop    %r9
  4000ff:	41 58                	pop    %r8
  400101:	5e                   	pop    %rsi
  400102:	5f                   	pop    %rdi
  400103:	5d                   	pop    %rbp
  400104:	5a                   	pop    %rdx
  400105:	59                   	pop    %rcx
  400106:	5b                   	pop    %rbx
  400107:	c3                   	retq   

0000000000400108 <console_clear>:
  400108:	53                   	push   %rbx
  400109:	51                   	push   %rcx
  40010a:	52                   	push   %rdx
  40010b:	55                   	push   %rbp
  40010c:	57                   	push   %rdi
  40010d:	56                   	push   %rsi
  40010e:	41 50                	push   %r8
  400110:	41 51                	push   %r9
  400112:	41 52                	push   %r10
  400114:	41 53                	push   %r11
  400116:	41 54                	push   %r12
  400118:	41 55                	push   %r13
  40011a:	41 56                	push   %r14
  40011c:	41 57                	push   %r15
  40011e:	b8 02 00 00 00       	mov    $0x2,%eax
  400123:	cd 80                	int    $0x80
  400125:	41 5f                	pop    %r15
  400127:	41 5e                	pop    %r14
  400129:	41 5d                	pop    %r13
  40012b:	41 5c                	pop    %r12
  40012d:	41 5b                	pop    %r11
  40012f:	41 5a                	pop    %r10
  400131:	41 59                	pop    %r9
  400133:	41 58                	pop    %r8
  400135:	5e                   	pop    %rsi
  400136:	5f                   	pop    %rdi
  400137:	5d                   	pop    %rbp
  400138:	5a                   	pop    %rdx
  400139:	59                   	pop    %rcx
  40013a:	5b                   	pop    %rbx
  40013b:	c3                   	retq   

000000000040013c <split_screen>:
  40013c:	53                   	push   %rbx
  40013d:	51                   	push   %rcx
  40013e:	52                   	push   %rdx
  40013f:	55                   	push   %rbp
  400140:	57                   	push   %rdi
  400141:	56                   	push   %rsi
  400142:	41 50                	push   %r8
  400144:	41 51                	push   %r9
  400146:	41 52                	push   %r10
  400148:	41 53                	push   %r11
  40014a:	41 54                	push   %r12
  40014c:	41 55                	push   %r13
  40014e:	41 56                	push   %r14
  400150:	41 57                	push   %r15
  400152:	b8 03 00 00 00       	mov    $0x3,%eax
  400157:	cd 80                	int    $0x80
  400159:	41 5f                	pop    %r15
  40015b:	41 5e                	pop    %r14
  40015d:	41 5d                	pop    %r13
  40015f:	41 5c                	pop    %r12
  400161:	41 5b                	pop    %r11
  400163:	41 5a                	pop    %r10
  400165:	41 59                	pop    %r9
  400167:	41 58                	pop    %r8
  400169:	5e                   	pop    %rsi
  40016a:	5f                   	pop    %rdi
  40016b:	5d                   	pop    %rbp
  40016c:	5a                   	pop    %rdx
  40016d:	59                   	pop    %rcx
  40016e:	5b                   	pop    %rbx
  40016f:	c3                   	retq   

0000000000400170 <set_screen>:
  400170:	53                   	push   %rbx
  400171:	51                   	push   %rcx
  400172:	52                   	push   %rdx
  400173:	55                   	push   %rbp
  400174:	57                   	push   %rdi
  400175:	56                   	push   %rsi
  400176:	41 50                	push   %r8
  400178:	41 51                	push   %r9
  40017a:	41 52                	push   %r10
  40017c:	41 53                	push   %r11
  40017e:	41 54                	push   %r12
  400180:	41 55                	push   %r13
  400182:	41 56                	push   %r14
  400184:	41 57                	push   %r15
  400186:	b8 04 00 00 00       	mov    $0x4,%eax
  40018b:	cd 80                	int    $0x80
  40018d:	41 5f                	pop    %r15
  40018f:	41 5e                	pop    %r14
  400191:	41 5d                	pop    %r13
  400193:	41 5c                	pop    %r12
  400195:	41 5b                	pop    %r11
  400197:	41 5a                	pop    %r10
  400199:	41 59                	pop    %r9
  40019b:	41 58                	pop    %r8
  40019d:	5e                   	pop    %rsi
  40019e:	5f                   	pop    %rdi
  40019f:	5d                   	pop    %rbp
  4001a0:	5a                   	pop    %rdx
  4001a1:	59                   	pop    %rcx
  4001a2:	5b                   	pop    %rbx
  4001a3:	c3                   	retq   

00000000004001a4 <get_char>:
  4001a4:	53                   	push   %rbx
  4001a5:	51                   	push   %rcx
  4001a6:	52                   	push   %rdx
  4001a7:	55                   	push   %rbp
  4001a8:	57                   	push   %rdi
  4001a9:	56                   	push   %rsi
  4001aa:	41 50                	push   %r8
  4001ac:	41 51                	push   %r9
  4001ae:	41 52                	push   %r10
  4001b0:	41 53                	push   %r11
  4001b2:	41 54                	push   %r12
  4001b4:	41 55                	push   %r13
  4001b6:	41 56                	push   %r14
  4001b8:	41 57                	push   %r15
  4001ba:	b8 05 00 00 00       	mov    $0x5,%eax
  4001bf:	cd 80                	int    $0x80
  4001c1:	41 5f                	pop    %r15
  4001c3:	41 5e                	pop    %r14
  4001c5:	41 5d                	pop    %r13
  4001c7:	41 5c                	pop    %r12
  4001c9:	41 5b                	pop    %r11
  4001cb:	41 5a                	pop    %r10
  4001cd:	41 59                	pop    %r9
  4001cf:	41 58                	pop    %r8
  4001d1:	5e                   	pop    %rsi
  4001d2:	5f                   	pop    %rdi
  4001d3:	5d                   	pop    %rbp
  4001d4:	5a                   	pop    %rdx
  4001d5:	59                   	pop    %rcx
  4001d6:	5b                   	pop    %rbx
  4001d7:	c3                   	retq   

00000000004001d8 <clear_line>:
  4001d8:	53                   	push   %rbx
  4001d9:	51                   	push   %rcx
  4001da:	52                   	push   %rdx
  4001db:	55                   	push   %rbp
  4001dc:	57                   	push   %rdi
  4001dd:	56                   	push   %rsi
  4001de:	41 50                	push   %r8
  4001e0:	41 51                	push   %r9
  4001e2:	41 52                	push   %r10
  4001e4:	41 53                	push   %r11
  4001e6:	41 54                	push   %r12
  4001e8:	41 55                	push   %r13
  4001ea:	41 56                	push   %r14
  4001ec:	41 57                	push   %r15
  4001ee:	b8 06 00 00 00       	mov    $0x6,%eax
  4001f3:	cd 80                	int    $0x80
  4001f5:	41 5f                	pop    %r15
  4001f7:	41 5e                	pop    %r14
  4001f9:	41 5d                	pop    %r13
  4001fb:	41 5c                	pop    %r12
  4001fd:	41 5b                	pop    %r11
  4001ff:	41 5a                	pop    %r10
  400201:	41 59                	pop    %r9
  400203:	41 58                	pop    %r8
  400205:	5e                   	pop    %rsi
  400206:	5f                   	pop    %rdi
  400207:	5d                   	pop    %rbp
  400208:	5a                   	pop    %rdx
  400209:	59                   	pop    %rcx
  40020a:	5b                   	pop    %rbx
  40020b:	c3                   	retq   

000000000040020c <get_time>:
  40020c:	53                   	push   %rbx
  40020d:	51                   	push   %rcx
  40020e:	52                   	push   %rdx
  40020f:	55                   	push   %rbp
  400210:	57                   	push   %rdi
  400211:	56                   	push   %rsi
  400212:	41 50                	push   %r8
  400214:	41 51                	push   %r9
  400216:	41 52                	push   %r10
  400218:	41 53                	push   %r11
  40021a:	41 54                	push   %r12
  40021c:	41 55                	push   %r13
  40021e:	41 56                	push   %r14
  400220:	41 57                	push   %r15
  400222:	b8 07 00 00 00       	mov    $0x7,%eax
  400227:	cd 80                	int    $0x80
  400229:	41 5f                	pop    %r15
  40022b:	41 5e                	pop    %r14
  40022d:	41 5d                	pop    %r13
  40022f:	41 5c                	pop    %r12
  400231:	41 5b                	pop    %r11
  400233:	41 5a                	pop    %r10
  400235:	41 59                	pop    %r9
  400237:	41 58                	pop    %r8
  400239:	5e                   	pop    %rsi
  40023a:	5f                   	pop    %rdi
  40023b:	5d                   	pop    %rbp
  40023c:	5a                   	pop    %rdx
  40023d:	59                   	pop    %rcx
  40023e:	5b                   	pop    %rbx
  40023f:	c3                   	retq   

0000000000400240 <timer_tick>:
  400240:	53                   	push   %rbx
  400241:	51                   	push   %rcx
  400242:	52                   	push   %rdx
  400243:	55                   	push   %rbp
  400244:	57                   	push   %rdi
  400245:	56                   	push   %rsi
  400246:	41 50                	push   %r8
  400248:	41 51                	push   %r9
  40024a:	41 52                	push   %r10
  40024c:	41 53                	push   %r11
  40024e:	41 54                	push   %r12
  400250:	41 55                	push   %r13
  400252:	41 56                	push   %r14
  400254:	41 57                	push   %r15
  400256:	b8 08 00 00 00       	mov    $0x8,%eax
  40025b:	cd 80                	int    $0x80
  40025d:	41 5f                	pop    %r15
  40025f:	41 5e                	pop    %r14
  400261:	41 5d                	pop    %r13
  400263:	41 5c                	pop    %r12
  400265:	41 5b                	pop    %r11
  400267:	41 5a                	pop    %r10
  400269:	41 59                	pop    %r9
  40026b:	41 58                	pop    %r8
  40026d:	5e                   	pop    %rsi
  40026e:	5f                   	pop    %rdi
  40026f:	5d                   	pop    %rbp
  400270:	5a                   	pop    %rdx
  400271:	59                   	pop    %rcx
  400272:	5b                   	pop    %rbx
  400273:	c3                   	retq   

0000000000400274 <set_kb_target>:
  400274:	53                   	push   %rbx
  400275:	51                   	push   %rcx
  400276:	52                   	push   %rdx
  400277:	55                   	push   %rbp
  400278:	57                   	push   %rdi
  400279:	56                   	push   %rsi
  40027a:	41 50                	push   %r8
  40027c:	41 51                	push   %r9
  40027e:	41 52                	push   %r10
  400280:	41 53                	push   %r11
  400282:	41 54                	push   %r12
  400284:	41 55                	push   %r13
  400286:	41 56                	push   %r14
  400288:	41 57                	push   %r15
  40028a:	b8 09 00 00 00       	mov    $0x9,%eax
  40028f:	cd 80                	int    $0x80
  400291:	41 5f                	pop    %r15
  400293:	41 5e                	pop    %r14
  400295:	41 5d                	pop    %r13
  400297:	41 5c                	pop    %r12
  400299:	41 5b                	pop    %r11
  40029b:	41 5a                	pop    %r10
  40029d:	41 59                	pop    %r9
  40029f:	41 58                	pop    %r8
  4002a1:	5e                   	pop    %rsi
  4002a2:	5f                   	pop    %rdi
  4002a3:	5d                   	pop    %rbp
  4002a4:	5a                   	pop    %rdx
  4002a5:	59                   	pop    %rcx
  4002a6:	5b                   	pop    %rbx
  4002a7:	c3                   	retq   

00000000004002a8 <get_date>:
  4002a8:	53                   	push   %rbx
  4002a9:	51                   	push   %rcx
  4002aa:	52                   	push   %rdx
  4002ab:	55                   	push   %rbp
  4002ac:	57                   	push   %rdi
  4002ad:	56                   	push   %rsi
  4002ae:	41 50                	push   %r8
  4002b0:	41 51                	push   %r9
  4002b2:	41 52                	push   %r10
  4002b4:	41 53                	push   %r11
  4002b6:	41 54                	push   %r12
  4002b8:	41 55                	push   %r13
  4002ba:	41 56                	push   %r14
  4002bc:	41 57                	push   %r15
  4002be:	b8 0a 00 00 00       	mov    $0xa,%eax
  4002c3:	cd 80                	int    $0x80
  4002c5:	41 5f                	pop    %r15
  4002c7:	41 5e                	pop    %r14
  4002c9:	41 5d                	pop    %r13
  4002cb:	41 5c                	pop    %r12
  4002cd:	41 5b                	pop    %r11
  4002cf:	41 5a                	pop    %r10
  4002d1:	41 59                	pop    %r9
  4002d3:	41 58                	pop    %r8
  4002d5:	5e                   	pop    %rsi
  4002d6:	5f                   	pop    %rdi
  4002d7:	5d                   	pop    %rbp
  4002d8:	5a                   	pop    %rdx
  4002d9:	59                   	pop    %rcx
  4002da:	5b                   	pop    %rbx
  4002db:	c3                   	retq   

00000000004002dc <letterCheck>:
========="
};


//Tengo que chequear que lo ingresador sea solo una letra
int letterCheck(char* c) {
  4002dc:	55                   	push   %rbp
  4002dd:	48 89 e5             	mov    %rsp,%rbp
  4002e0:	48 83 ec 20          	sub    $0x20,%rsp
  4002e4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if (*(c+1)!=0)
  4002e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4002ec:	48 83 c0 01          	add    $0x1,%rax
  4002f0:	0f b6 00             	movzbl (%rax),%eax
  4002f3:	84 c0                	test   %al,%al
  4002f5:	74 0a                	je     400301 <letterCheck+0x25>
        return MORE_THAN_1_LETTER;           //No metieron un unico ascii
  4002f7:	b8 02 00 00 00       	mov    $0x2,%eax
  4002fc:	e9 87 00 00 00       	jmpq   400388 <letterCheck+0xac>
    if (!IS_ALPHA(*c))
  400301:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400305:	0f b6 00             	movzbl (%rax),%eax
  400308:	3c 60                	cmp    $0x60,%al
  40030a:	7e 0b                	jle    400317 <letterCheck+0x3b>
  40030c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400310:	0f b6 00             	movzbl (%rax),%eax
  400313:	3c 7a                	cmp    $0x7a,%al
  400315:	7e 1d                	jle    400334 <letterCheck+0x58>
  400317:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40031b:	0f b6 00             	movzbl (%rax),%eax
  40031e:	3c 40                	cmp    $0x40,%al
  400320:	7e 0b                	jle    40032d <letterCheck+0x51>
  400322:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400326:	0f b6 00             	movzbl (%rax),%eax
  400329:	3c 5a                	cmp    $0x5a,%al
  40032b:	7e 07                	jle    400334 <letterCheck+0x58>
        return NOT_LETTER;          //El ascii ingresado no es una letra
  40032d:	b8 01 00 00 00       	mov    $0x1,%eax
  400332:	eb 54                	jmp    400388 <letterCheck+0xac>
    *c = toUpper(*c);
  400334:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400338:	0f b6 00             	movzbl (%rax),%eax
  40033b:	0f be c0             	movsbl %al,%eax
  40033e:	89 c7                	mov    %eax,%edi
  400340:	e8 08 10 00 00       	callq  40134d <toUpper>
  400345:	89 c2                	mov    %eax,%edx
  400347:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40034b:	88 10                	mov    %dl,(%rax)
    
    for (int i=0; i< letterIndex;i+=2){     //De a dos ya que hay un guion entre cada letra
  40034d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  400354:	eb 22                	jmp    400378 <letterCheck+0x9c>
        if (*c==lettersUsed[i])
  400356:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40035a:	0f b6 10             	movzbl (%rax),%edx
  40035d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400360:	48 98                	cltq   
  400362:	0f b6 80 40 50 40 00 	movzbl 0x405040(%rax),%eax
  400369:	38 c2                	cmp    %al,%dl
  40036b:	75 07                	jne    400374 <letterCheck+0x98>
            return LETTER_REPEATED;           //La letra ingresada ya fue utilizada
  40036d:	b8 04 00 00 00       	mov    $0x4,%eax
  400372:	eb 14                	jmp    400388 <letterCheck+0xac>
    for (int i=0; i< letterIndex;i+=2){     //De a dos ya que hay un guion entre cada letra
  400374:	83 45 fc 02          	addl   $0x2,-0x4(%rbp)
  400378:	8b 05 f6 4c 00 00    	mov    0x4cf6(%rip),%eax        # 405074 <letterIndex>
  40037e:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  400381:	7c d3                	jl     400356 <letterCheck+0x7a>
    }
    return 0;
  400383:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400388:	c9                   	leaveq 
  400389:	c3                   	retq   

000000000040038a <inputLetter>:

int inputLetter(char* shellBuffer) {
  40038a:	55                   	push   %rbp
  40038b:	48 89 e5             	mov    %rsp,%rbp
  40038e:	48 83 ec 30          	sub    $0x30,%rsp
  400392:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    if (gameEnded==1) {
  400396:	8b 05 8c 4c 00 00    	mov    0x4c8c(%rip),%eax        # 405028 <gameEnded>
  40039c:	83 f8 01             	cmp    $0x1,%eax
  40039f:	75 1f                	jne    4003c0 <inputLetter+0x36>
        if (wrongLetters == MAX_FAILS)
  4003a1:	8b 05 d1 4c 00 00    	mov    0x4cd1(%rip),%eax        # 405078 <wrongLetters>
  4003a7:	83 f8 06             	cmp    $0x6,%eax
  4003aa:	75 0a                	jne    4003b6 <inputLetter+0x2c>
            return GAME_LOST;
  4003ac:	b8 05 00 00 00       	mov    $0x5,%eax
  4003b1:	e9 4f 01 00 00       	jmpq   400505 <inputLetter+0x17b>
        else
            return GAME_COMPLETED;
  4003b6:	b8 03 00 00 00       	mov    $0x3,%eax
  4003bb:	e9 45 01 00 00       	jmpq   400505 <inputLetter+0x17b>
    }
    int check= letterCheck(shellBuffer);  
  4003c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4003c4:	48 89 c7             	mov    %rax,%rdi
  4003c7:	e8 10 ff ff ff       	callq  4002dc <letterCheck>
  4003cc:	89 45 e4             	mov    %eax,-0x1c(%rbp)

    if (check!=0)
  4003cf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  4003d3:	74 08                	je     4003dd <inputLetter+0x53>
        return check;
  4003d5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4003d8:	e9 28 01 00 00       	jmpq   400505 <inputLetter+0x17b>
    
    int i=0;
  4003dd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    int j=0;
  4003e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    int found = 0;
  4003eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    while(GUESSING_WORD[i] != 0){
  4003f2:	eb 4d                	jmp    400441 <inputLetter+0xb7>
        if (GUESSING_WORD[i]==*shellBuffer && userWord[j]=='_'){       //Si coincide una letra y estaba todavia desconocido la agrego
  4003f4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4003f7:	48 98                	cltq   
  4003f9:	0f b6 90 40 40 40 00 	movzbl 0x404040(%rax),%edx
  400400:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400404:	0f b6 00             	movzbl (%rax),%eax
  400407:	38 c2                	cmp    %al,%dl
  400409:	75 2e                	jne    400439 <inputLetter+0xaf>
  40040b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40040e:	48 98                	cltq   
  400410:	0f b6 80 00 50 40 00 	movzbl 0x405000(%rax),%eax
  400417:	3c 5f                	cmp    $0x5f,%al
  400419:	75 1e                	jne    400439 <inputLetter+0xaf>
            userWord[j]=GUESSING_WORD[i];
  40041b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40041e:	48 98                	cltq   
  400420:	0f b6 90 40 40 40 00 	movzbl 0x404040(%rax),%edx
  400427:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40042a:	48 98                	cltq   
  40042c:	88 90 00 50 40 00    	mov    %dl,0x405000(%rax)
            found = 1;
  400432:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
        }
        i++;
  400439:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
        j+=2;
  40043d:	83 45 f8 02          	addl   $0x2,-0x8(%rbp)
    while(GUESSING_WORD[i] != 0){
  400441:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400444:	48 98                	cltq   
  400446:	0f b6 80 40 40 40 00 	movzbl 0x404040(%rax),%eax
  40044d:	84 c0                	test   %al,%al
  40044f:	75 a3                	jne    4003f4 <inputLetter+0x6a>
    }           //Se van a llenar todos los espacion con la letra si coincide

    if (!found) {
  400451:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  400455:	75 57                	jne    4004ae <inputLetter+0x124>
        lettersUsed[letterIndex++]=*shellBuffer;
  400457:	8b 05 17 4c 00 00    	mov    0x4c17(%rip),%eax        # 405074 <letterIndex>
  40045d:	8d 50 01             	lea    0x1(%rax),%edx
  400460:	89 15 0e 4c 00 00    	mov    %edx,0x4c0e(%rip)        # 405074 <letterIndex>
  400466:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40046a:	0f b6 12             	movzbl (%rdx),%edx
  40046d:	48 98                	cltq   
  40046f:	88 90 40 50 40 00    	mov    %dl,0x405040(%rax)
        lettersUsed[letterIndex++]='-';
  400475:	8b 05 f9 4b 00 00    	mov    0x4bf9(%rip),%eax        # 405074 <letterIndex>
  40047b:	8d 50 01             	lea    0x1(%rax),%edx
  40047e:	89 15 f0 4b 00 00    	mov    %edx,0x4bf0(%rip)        # 405074 <letterIndex>
  400484:	48 98                	cltq   
  400486:	c6 80 40 50 40 00 2d 	movb   $0x2d,0x405040(%rax)
        lettersUsed[letterIndex+1]=0;
  40048d:	8b 05 e1 4b 00 00    	mov    0x4be1(%rip),%eax        # 405074 <letterIndex>
  400493:	83 c0 01             	add    $0x1,%eax
  400496:	48 98                	cltq   
  400498:	c6 80 40 50 40 00 00 	movb   $0x0,0x405040(%rax)
        wrongLetters++;
  40049f:	8b 05 d3 4b 00 00    	mov    0x4bd3(%rip),%eax        # 405078 <wrongLetters>
  4004a5:	83 c0 01             	add    $0x1,%eax
  4004a8:	89 05 ca 4b 00 00    	mov    %eax,0x4bca(%rip)        # 405078 <wrongLetters>
    }

    if (wrongLetters == MAX_FAILS) {
  4004ae:	8b 05 c4 4b 00 00    	mov    0x4bc4(%rip),%eax        # 405078 <wrongLetters>
  4004b4:	83 f8 06             	cmp    $0x6,%eax
  4004b7:	75 11                	jne    4004ca <inputLetter+0x140>
        gameEnded = 1;
  4004b9:	c7 05 65 4b 00 00 01 	movl   $0x1,0x4b65(%rip)        # 405028 <gameEnded>
  4004c0:	00 00 00 
        return GAME_LOST;
  4004c3:	b8 05 00 00 00       	mov    $0x5,%eax
  4004c8:	eb 3b                	jmp    400505 <inputLetter+0x17b>
    }
        

    char* auxPointer=userWord;
  4004ca:	48 c7 45 e8 00 50 40 	movq   $0x405000,-0x18(%rbp)
  4004d1:	00 
    while(*auxPointer){
  4004d2:	eb 17                	jmp    4004eb <inputLetter+0x161>
        if (*auxPointer=='_'){
  4004d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4004d8:	0f b6 00             	movzbl (%rax),%eax
  4004db:	3c 5f                	cmp    $0x5f,%al
  4004dd:	75 07                	jne    4004e6 <inputLetter+0x15c>
            return 0;
  4004df:	b8 00 00 00 00       	mov    $0x0,%eax
  4004e4:	eb 1f                	jmp    400505 <inputLetter+0x17b>
        }
        auxPointer++;
  4004e6:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    while(*auxPointer){
  4004eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4004ef:	0f b6 00             	movzbl (%rax),%eax
  4004f2:	84 c0                	test   %al,%al
  4004f4:	75 de                	jne    4004d4 <inputLetter+0x14a>
    }
    gameEnded=1;   
  4004f6:	c7 05 28 4b 00 00 01 	movl   $0x1,0x4b28(%rip)        # 405028 <gameEnded>
  4004fd:	00 00 00 
    return GAME_COMPLETED;
  400500:	b8 03 00 00 00       	mov    $0x3,%eax
}
  400505:	c9                   	leaveq 
  400506:	c3                   	retq   

0000000000400507 <solveHangman>:

void solveHangman(){
  400507:	55                   	push   %rbp
  400508:	48 89 e5             	mov    %rsp,%rbp
  40050b:	48 83 ec 10          	sub    $0x10,%rsp
    int i=0;
  40050f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    int j=0;
  400516:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    while(GUESSING_WORD[i]!=0){
  40051d:	eb 1f                	jmp    40053e <solveHangman+0x37>
        userWord[j]=GUESSING_WORD[i];
  40051f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400522:	48 98                	cltq   
  400524:	0f b6 90 40 40 40 00 	movzbl 0x404040(%rax),%edx
  40052b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40052e:	48 98                	cltq   
  400530:	88 90 00 50 40 00    	mov    %dl,0x405000(%rax)
        i++;
  400536:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
        j += 2;
  40053a:	83 45 f8 02          	addl   $0x2,-0x8(%rbp)
    while(GUESSING_WORD[i]!=0){
  40053e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400541:	48 98                	cltq   
  400543:	0f b6 80 40 40 40 00 	movzbl 0x404040(%rax),%eax
  40054a:	84 c0                	test   %al,%al
  40054c:	75 d1                	jne    40051f <solveHangman+0x18>
    }
}
  40054e:	c9                   	leaveq 
  40054f:	c3                   	retq   

0000000000400550 <initHangman>:

void initHangman() {
  400550:	55                   	push   %rbp
  400551:	48 89 e5             	mov    %rsp,%rbp
  400554:	48 83 ec 10          	sub    $0x10,%rsp
    letterIndex = gameEnded = 0;
  400558:	c7 05 c6 4a 00 00 00 	movl   $0x0,0x4ac6(%rip)        # 405028 <gameEnded>
  40055f:	00 00 00 
  400562:	8b 05 c0 4a 00 00    	mov    0x4ac0(%rip),%eax        # 405028 <gameEnded>
  400568:	89 05 06 4b 00 00    	mov    %eax,0x4b06(%rip)        # 405074 <letterIndex>
    lettersUsed[0]=0;
  40056e:	c6 05 cb 4a 00 00 00 	movb   $0x0,0x4acb(%rip)        # 405040 <lettersUsed>
    wrongLetters = 0;
  400575:	c7 05 f9 4a 00 00 00 	movl   $0x0,0x4af9(%rip)        # 405078 <wrongLetters>
  40057c:	00 00 00 
    int i;
    for (i=0; GUESSING_WORD[i]; i++) {
  40057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  400586:	eb 23                	jmp    4005ab <initHangman+0x5b>
        userWord[2*i]='_';
  400588:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40058b:	01 c0                	add    %eax,%eax
  40058d:	48 98                	cltq   
  40058f:	c6 80 00 50 40 00 5f 	movb   $0x5f,0x405000(%rax)
        userWord[2*i+1]=' ';
  400596:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400599:	01 c0                	add    %eax,%eax
  40059b:	83 c0 01             	add    $0x1,%eax
  40059e:	48 98                	cltq   
  4005a0:	c6 80 00 50 40 00 20 	movb   $0x20,0x405000(%rax)
    for (i=0; GUESSING_WORD[i]; i++) {
  4005a7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4005ab:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4005ae:	48 98                	cltq   
  4005b0:	0f b6 80 40 40 40 00 	movzbl 0x404040(%rax),%eax
  4005b7:	84 c0                	test   %al,%al
  4005b9:	75 cd                	jne    400588 <initHangman+0x38>
    }
    userWord[2*i-1]=0;
  4005bb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4005be:	01 c0                	add    %eax,%eax
  4005c0:	83 e8 01             	sub    $0x1,%eax
  4005c3:	48 98                	cltq   
  4005c5:	c6 80 00 50 40 00 00 	movb   $0x0,0x405000(%rax)
}
  4005cc:	c9                   	leaveq 
  4005cd:	c3                   	retq   

00000000004005ce <printHangman>:

void printHangman() {
  4005ce:	55                   	push   %rbp
  4005cf:	48 89 e5             	mov    %rsp,%rbp
  4005d2:	48 83 ec 10          	sub    $0x10,%rsp
    char color = GREY;
  4005d6:	c6 45 ff 07          	movb   $0x7,-0x1(%rbp)

    if (wrongLetters == MAX_FAILS)
  4005da:	8b 05 98 4a 00 00    	mov    0x4a98(%rip),%eax        # 405078 <wrongLetters>
  4005e0:	83 f8 06             	cmp    $0x6,%eax
  4005e3:	75 04                	jne    4005e9 <printHangman+0x1b>
        color = RED;
  4005e5:	c6 45 ff 04          	movb   $0x4,-0x1(%rbp)

    printColor(levels[wrongLetters],color);
  4005e9:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
  4005ed:	8b 15 85 4a 00 00    	mov    0x4a85(%rip),%edx        # 405078 <wrongLetters>
  4005f3:	48 63 d2             	movslq %edx,%rdx
  4005f6:	48 6b d2 46          	imul   $0x46,%rdx,%rdx
  4005fa:	48 81 c2 80 40 40 00 	add    $0x404080,%rdx
  400601:	89 c6                	mov    %eax,%esi
  400603:	48 89 d7             	mov    %rdx,%rdi
  400606:	e8 bc 09 00 00       	callq  400fc7 <printColor>
    putChar('\n');
  40060b:	bf 0a 00 00 00       	mov    $0xa,%edi
  400610:	e8 47 10 00 00       	callq  40165c <putChar>
    print(userWord);
  400615:	bf 00 50 40 00       	mov    $0x405000,%edi
  40061a:	e8 ed 09 00 00       	callq  40100c <print>

    putChar('\n');
  40061f:	bf 0a 00 00 00       	mov    $0xa,%edi
  400624:	e8 33 10 00 00       	callq  40165c <putChar>
    print(lettersUsed);
  400629:	bf 40 50 40 00       	mov    $0x405040,%edi
  40062e:	e8 d9 09 00 00       	callq  40100c <print>
    putChar('\n');
  400633:	bf 0a 00 00 00       	mov    $0xa,%edi
  400638:	e8 1f 10 00 00       	callq  40165c <putChar>
}
  40063d:	c9                   	leaveq 
  40063e:	c3                   	retq   

000000000040063f <moveCursor>:
//           {6, 9, 2, 3, 5, 1, 8, 7, 4},
//           {7, 4, 5, 2, 8, 6, 3, 1, 9}};

static int cursor[2] = {0};

void moveCursor(int x, int y) {
  40063f:	55                   	push   %rbp
  400640:	48 89 e5             	mov    %rsp,%rbp
  400643:	48 83 ec 08          	sub    $0x8,%rsp
  400647:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40064a:	89 75 f8             	mov    %esi,-0x8(%rbp)
    if (cursor[0]+x >= LENGTH)
  40064d:	8b 15 29 4a 00 00    	mov    0x4a29(%rip),%edx        # 40507c <cursor>
  400653:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400656:	01 d0                	add    %edx,%eax
  400658:	83 f8 08             	cmp    $0x8,%eax
  40065b:	7e 0c                	jle    400669 <moveCursor+0x2a>
        cursor[0] = LENGTH-1;
  40065d:	c7 05 15 4a 00 00 08 	movl   $0x8,0x4a15(%rip)        # 40507c <cursor>
  400664:	00 00 00 
  400667:	eb 11                	jmp    40067a <moveCursor+0x3b>
    else
        cursor[0] += x;
  400669:	8b 15 0d 4a 00 00    	mov    0x4a0d(%rip),%edx        # 40507c <cursor>
  40066f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400672:	01 d0                	add    %edx,%eax
  400674:	89 05 02 4a 00 00    	mov    %eax,0x4a02(%rip)        # 40507c <cursor>

    if (cursor[1]+y >= LENGTH)
  40067a:	8b 15 00 4a 00 00    	mov    0x4a00(%rip),%edx        # 405080 <cursor+0x4>
  400680:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400683:	01 d0                	add    %edx,%eax
  400685:	83 f8 08             	cmp    $0x8,%eax
  400688:	7e 0c                	jle    400696 <moveCursor+0x57>
        cursor[1] = LENGTH-1;
  40068a:	c7 05 ec 49 00 00 08 	movl   $0x8,0x49ec(%rip)        # 405080 <cursor+0x4>
  400691:	00 00 00 
  400694:	eb 11                	jmp    4006a7 <moveCursor+0x68>
    else
        cursor[1] += y;
  400696:	8b 15 e4 49 00 00    	mov    0x49e4(%rip),%edx        # 405080 <cursor+0x4>
  40069c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40069f:	01 d0                	add    %edx,%eax
  4006a1:	89 05 d9 49 00 00    	mov    %eax,0x49d9(%rip)        # 405080 <cursor+0x4>
}
  4006a7:	c9                   	leaveq 
  4006a8:	c3                   	retq   

00000000004006a9 <possibleMove>:

int possibleMove(int row, int col, int num) {
  4006a9:	55                   	push   %rbp
  4006aa:	48 89 e5             	mov    %rsp,%rbp
  4006ad:	48 83 ec 30          	sub    $0x30,%rsp
  4006b1:	89 7d dc             	mov    %edi,-0x24(%rbp)
  4006b4:	89 75 d8             	mov    %esi,-0x28(%rbp)
  4006b7:	89 55 d4             	mov    %edx,-0x2c(%rbp)

    for (int x = 0; x <= 8; x++)
  4006ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  4006c1:	eb 33                	jmp    4006f6 <possibleMove+0x4d>
        if (board[row][x] == num)
  4006c3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4006c6:	48 63 c8             	movslq %eax,%rcx
  4006c9:	8b 45 dc             	mov    -0x24(%rbp),%eax
  4006cc:	48 63 d0             	movslq %eax,%rdx
  4006cf:	48 89 d0             	mov    %rdx,%rax
  4006d2:	48 c1 e0 03          	shl    $0x3,%rax
  4006d6:	48 01 d0             	add    %rdx,%rax
  4006d9:	48 01 c8             	add    %rcx,%rax
  4006dc:	8b 04 85 80 42 40 00 	mov    0x404280(,%rax,4),%eax
  4006e3:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
  4006e6:	75 0a                	jne    4006f2 <possibleMove+0x49>
            return 0;
  4006e8:	b8 00 00 00 00       	mov    $0x0,%eax
  4006ed:	e9 f8 00 00 00       	jmpq   4007ea <possibleMove+0x141>
    for (int x = 0; x <= 8; x++)
  4006f2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4006f6:	83 7d fc 08          	cmpl   $0x8,-0x4(%rbp)
  4006fa:	7e c7                	jle    4006c3 <possibleMove+0x1a>
 

    for (int x = 0; x <= 8; x++)
  4006fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  400703:	eb 33                	jmp    400738 <possibleMove+0x8f>
        if (board[x][col] == num)
  400705:	8b 45 d8             	mov    -0x28(%rbp),%eax
  400708:	48 63 c8             	movslq %eax,%rcx
  40070b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40070e:	48 63 d0             	movslq %eax,%rdx
  400711:	48 89 d0             	mov    %rdx,%rax
  400714:	48 c1 e0 03          	shl    $0x3,%rax
  400718:	48 01 d0             	add    %rdx,%rax
  40071b:	48 01 c8             	add    %rcx,%rax
  40071e:	8b 04 85 80 42 40 00 	mov    0x404280(,%rax,4),%eax
  400725:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
  400728:	75 0a                	jne    400734 <possibleMove+0x8b>
            return 0;
  40072a:	b8 00 00 00 00       	mov    $0x0,%eax
  40072f:	e9 b6 00 00 00       	jmpq   4007ea <possibleMove+0x141>
    for (int x = 0; x <= 8; x++)
  400734:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  400738:	83 7d f8 08          	cmpl   $0x8,-0x8(%rbp)
  40073c:	7e c7                	jle    400705 <possibleMove+0x5c>
 

    int startRow = row - row % 3,
  40073e:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  400741:	ba 56 55 55 55       	mov    $0x55555556,%edx
  400746:	89 c8                	mov    %ecx,%eax
  400748:	f7 ea                	imul   %edx
  40074a:	89 c8                	mov    %ecx,%eax
  40074c:	c1 f8 1f             	sar    $0x1f,%eax
  40074f:	29 c2                	sub    %eax,%edx
  400751:	89 d0                	mov    %edx,%eax
  400753:	01 c0                	add    %eax,%eax
  400755:	01 d0                	add    %edx,%eax
  400757:	29 c1                	sub    %eax,%ecx
  400759:	89 ca                	mov    %ecx,%edx
  40075b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40075e:	29 d0                	sub    %edx,%eax
  400760:	89 45 ec             	mov    %eax,-0x14(%rbp)
            startCol = col - col % 3;
  400763:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  400766:	ba 56 55 55 55       	mov    $0x55555556,%edx
  40076b:	89 c8                	mov    %ecx,%eax
  40076d:	f7 ea                	imul   %edx
  40076f:	89 c8                	mov    %ecx,%eax
  400771:	c1 f8 1f             	sar    $0x1f,%eax
  400774:	29 c2                	sub    %eax,%edx
  400776:	89 d0                	mov    %edx,%eax
  400778:	01 c0                	add    %eax,%eax
  40077a:	01 d0                	add    %edx,%eax
  40077c:	29 c1                	sub    %eax,%ecx
  40077e:	89 ca                	mov    %ecx,%edx
  400780:	8b 45 d8             	mov    -0x28(%rbp),%eax
  400783:	29 d0                	sub    %edx,%eax
  400785:	89 45 e8             	mov    %eax,-0x18(%rbp)
   
    for (int i = 0; i < 3; i++)
  400788:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  40078f:	eb 4e                	jmp    4007df <possibleMove+0x136>
        for (int j = 0; j < 3; j++)
  400791:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  400798:	eb 3b                	jmp    4007d5 <possibleMove+0x12c>
            if (board[i + startRow][j +
  40079a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40079d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4007a0:	8d 34 02             	lea    (%rdx,%rax,1),%esi
  4007a3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  4007a6:	8b 45 e8             	mov    -0x18(%rbp),%eax
  4007a9:	01 d0                	add    %edx,%eax
  4007ab:	48 63 c8             	movslq %eax,%rcx
  4007ae:	48 63 d6             	movslq %esi,%rdx
  4007b1:	48 89 d0             	mov    %rdx,%rax
  4007b4:	48 c1 e0 03          	shl    $0x3,%rax
  4007b8:	48 01 d0             	add    %rdx,%rax
  4007bb:	48 01 c8             	add    %rcx,%rax
  4007be:	8b 04 85 80 42 40 00 	mov    0x404280(,%rax,4),%eax
  4007c5:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
  4007c8:	75 07                	jne    4007d1 <possibleMove+0x128>
                            startCol] == num)
                return 0;
  4007ca:	b8 00 00 00 00       	mov    $0x0,%eax
  4007cf:	eb 19                	jmp    4007ea <possibleMove+0x141>
        for (int j = 0; j < 3; j++)
  4007d1:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  4007d5:	83 7d f0 02          	cmpl   $0x2,-0x10(%rbp)
  4007d9:	7e bf                	jle    40079a <possibleMove+0xf1>
    for (int i = 0; i < 3; i++)
  4007db:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  4007df:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  4007e3:	7e ac                	jle    400791 <possibleMove+0xe8>
 
    return 1;
  4007e5:	b8 01 00 00 00       	mov    $0x1,%eax
}
  4007ea:	c9                   	leaveq 
  4007eb:	c3                   	retq   

00000000004007ec <solve>:

int solve(int row, int col)
{
  4007ec:	55                   	push   %rbp
  4007ed:	48 89 e5             	mov    %rsp,%rbp
  4007f0:	48 83 ec 20          	sub    $0x20,%rsp
  4007f4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  4007f7:	89 75 e8             	mov    %esi,-0x18(%rbp)

    if (row == LENGTH - 1 && col == LENGTH)
  4007fa:	83 7d ec 08          	cmpl   $0x8,-0x14(%rbp)
  4007fe:	75 10                	jne    400810 <solve+0x24>
  400800:	83 7d e8 09          	cmpl   $0x9,-0x18(%rbp)
  400804:	75 0a                	jne    400810 <solve+0x24>
        return 1;
  400806:	b8 01 00 00 00       	mov    $0x1,%eax
  40080b:	e9 e3 00 00 00       	jmpq   4008f3 <solve+0x107>
 
    if (col == LENGTH) {
  400810:	83 7d e8 09          	cmpl   $0x9,-0x18(%rbp)
  400814:	75 0b                	jne    400821 <solve+0x35>
        row++;
  400816:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
        col = 0;
  40081a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
    }
   
    if (board[row][col] > 0)
  400821:	8b 45 e8             	mov    -0x18(%rbp),%eax
  400824:	48 63 c8             	movslq %eax,%rcx
  400827:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40082a:	48 63 d0             	movslq %eax,%rdx
  40082d:	48 89 d0             	mov    %rdx,%rax
  400830:	48 c1 e0 03          	shl    $0x3,%rax
  400834:	48 01 d0             	add    %rdx,%rax
  400837:	48 01 c8             	add    %rcx,%rax
  40083a:	8b 04 85 80 42 40 00 	mov    0x404280(,%rax,4),%eax
  400841:	85 c0                	test   %eax,%eax
  400843:	7e 17                	jle    40085c <solve+0x70>
        return solve(row, col + 1);
  400845:	8b 45 e8             	mov    -0x18(%rbp),%eax
  400848:	8d 50 01             	lea    0x1(%rax),%edx
  40084b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40084e:	89 d6                	mov    %edx,%esi
  400850:	89 c7                	mov    %eax,%edi
  400852:	e8 95 ff ff ff       	callq  4007ec <solve>
  400857:	e9 97 00 00 00       	jmpq   4008f3 <solve+0x107>
 
    for (int num = 1; num <= LENGTH; num++)
  40085c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  400863:	eb 7f                	jmp    4008e4 <solve+0xf8>
    {
         
        if (possibleMove(row, col, num))
  400865:	8b 55 fc             	mov    -0x4(%rbp),%edx
  400868:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  40086b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40086e:	89 ce                	mov    %ecx,%esi
  400870:	89 c7                	mov    %eax,%edi
  400872:	e8 32 fe ff ff       	callq  4006a9 <possibleMove>
  400877:	85 c0                	test   %eax,%eax
  400879:	74 41                	je     4008bc <solve+0xd0>
        {
            board[row][col] = num;
  40087b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40087e:	48 63 c8             	movslq %eax,%rcx
  400881:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400884:	48 63 d0             	movslq %eax,%rdx
  400887:	48 89 d0             	mov    %rdx,%rax
  40088a:	48 c1 e0 03          	shl    $0x3,%rax
  40088e:	48 01 d0             	add    %rdx,%rax
  400891:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  400895:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400898:	89 04 95 80 42 40 00 	mov    %eax,0x404280(,%rdx,4)
           
   
            if (solve(row, col + 1))
  40089f:	8b 45 e8             	mov    -0x18(%rbp),%eax
  4008a2:	8d 50 01             	lea    0x1(%rax),%edx
  4008a5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4008a8:	89 d6                	mov    %edx,%esi
  4008aa:	89 c7                	mov    %eax,%edi
  4008ac:	e8 3b ff ff ff       	callq  4007ec <solve>
  4008b1:	85 c0                	test   %eax,%eax
  4008b3:	74 07                	je     4008bc <solve+0xd0>
                return 1;
  4008b5:	b8 01 00 00 00       	mov    $0x1,%eax
  4008ba:	eb 37                	jmp    4008f3 <solve+0x107>
        }
       
        board[row][col] = 0;
  4008bc:	8b 45 e8             	mov    -0x18(%rbp),%eax
  4008bf:	48 63 c8             	movslq %eax,%rcx
  4008c2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4008c5:	48 63 d0             	movslq %eax,%rdx
  4008c8:	48 89 d0             	mov    %rdx,%rax
  4008cb:	48 c1 e0 03          	shl    $0x3,%rax
  4008cf:	48 01 d0             	add    %rdx,%rax
  4008d2:	48 01 c8             	add    %rcx,%rax
  4008d5:	c7 04 85 80 42 40 00 	movl   $0x0,0x404280(,%rax,4)
  4008dc:	00 00 00 00 
    for (int num = 1; num <= LENGTH; num++)
  4008e0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4008e4:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
  4008e8:	0f 8e 77 ff ff ff    	jle    400865 <solve+0x79>
    }
    return 0;
  4008ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
  4008f3:	c9                   	leaveq 
  4008f4:	c3                   	retq   

00000000004008f5 <solveSudoku>:

void solveSudoku() {
  4008f5:	55                   	push   %rbp
  4008f6:	48 89 e5             	mov    %rsp,%rbp
    initSudoku();
  4008f9:	b8 00 00 00 00       	mov    $0x0,%eax
  4008fe:	e8 d9 02 00 00       	callq  400bdc <initSudoku>
    solve(0,0);
  400903:	be 00 00 00 00       	mov    $0x0,%esi
  400908:	bf 00 00 00 00       	mov    $0x0,%edi
  40090d:	e8 da fe ff ff       	callq  4007ec <solve>
}
  400912:	5d                   	pop    %rbp
  400913:	c3                   	retq   

0000000000400914 <printBoard>:

void printBoard() {
  400914:	55                   	push   %rbp
  400915:	48 89 e5             	mov    %rsp,%rbp
  400918:	48 83 ec 10          	sub    $0x10,%rsp
    print(SPACES);
  40091c:	bf 84 31 40 00       	mov    $0x403184,%edi
  400921:	e8 e6 06 00 00       	callq  40100c <print>
    print(LINE);
  400926:	bf 8d 31 40 00       	mov    $0x40318d,%edi
  40092b:	e8 dc 06 00 00       	callq  40100c <print>
    for (int i=0 ; i<LENGTH ; i++) {
  400930:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  400937:	e9 2b 01 00 00       	jmpq   400a67 <printBoard+0x153>
        print(SPACES);
  40093c:	bf 84 31 40 00       	mov    $0x403184,%edi
  400941:	e8 c6 06 00 00       	callq  40100c <print>
        putChar('A' + i);
  400946:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400949:	83 c0 41             	add    $0x41,%eax
  40094c:	0f be c0             	movsbl %al,%eax
  40094f:	89 c7                	mov    %eax,%edi
  400951:	e8 06 0d 00 00       	callq  40165c <putChar>
        print("| ");
  400956:	bf a5 31 40 00       	mov    $0x4031a5,%edi
  40095b:	e8 ac 06 00 00       	callq  40100c <print>
        for (int j=0 ; j<LENGTH ; j++) {
  400960:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  400967:	e9 d9 00 00 00       	jmpq   400a45 <printBoard+0x131>
            char c = intToChar(board[i][j]);
  40096c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40096f:	48 63 c8             	movslq %eax,%rcx
  400972:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400975:	48 63 d0             	movslq %eax,%rdx
  400978:	48 89 d0             	mov    %rdx,%rax
  40097b:	48 c1 e0 03          	shl    $0x3,%rax
  40097f:	48 01 d0             	add    %rdx,%rax
  400982:	48 01 c8             	add    %rcx,%rax
  400985:	8b 04 85 80 42 40 00 	mov    0x404280(,%rax,4),%eax
  40098c:	89 c7                	mov    %eax,%edi
  40098e:	e8 e8 0c 00 00       	callq  40167b <intToChar>
  400993:	88 45 f7             	mov    %al,-0x9(%rbp)
            if (board[i][j] == 0) {
  400996:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400999:	48 63 c8             	movslq %eax,%rcx
  40099c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40099f:	48 63 d0             	movslq %eax,%rdx
  4009a2:	48 89 d0             	mov    %rdx,%rax
  4009a5:	48 c1 e0 03          	shl    $0x3,%rax
  4009a9:	48 01 d0             	add    %rdx,%rax
  4009ac:	48 01 c8             	add    %rcx,%rax
  4009af:	8b 04 85 80 42 40 00 	mov    0x404280(,%rax,4),%eax
  4009b6:	85 c0                	test   %eax,%eax
  4009b8:	75 11                	jne    4009cb <printBoard+0xb7>
                putCharColor(' ', GREY | GREY_BG);
  4009ba:	be 77 00 00 00       	mov    $0x77,%esi
  4009bf:	bf 20 00 00 00       	mov    $0x20,%edi
  4009c4:	e8 54 0c 00 00       	callq  40161d <putCharColor>
  4009c9:	eb 66                	jmp    400a31 <printBoard+0x11d>
            }
            else if (board[i][j] == boardTemplate[i][j]) {
  4009cb:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4009ce:	48 63 c8             	movslq %eax,%rcx
  4009d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4009d4:	48 63 d0             	movslq %eax,%rdx
  4009d7:	48 89 d0             	mov    %rdx,%rax
  4009da:	48 c1 e0 03          	shl    $0x3,%rax
  4009de:	48 01 d0             	add    %rdx,%rax
  4009e1:	48 01 c8             	add    %rcx,%rax
  4009e4:	8b 0c 85 80 42 40 00 	mov    0x404280(,%rax,4),%ecx
  4009eb:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4009ee:	48 63 f0             	movslq %eax,%rsi
  4009f1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4009f4:	48 63 d0             	movslq %eax,%rdx
  4009f7:	48 89 d0             	mov    %rdx,%rax
  4009fa:	48 c1 e0 03          	shl    $0x3,%rax
  4009fe:	48 01 d0             	add    %rdx,%rax
  400a01:	48 01 f0             	add    %rsi,%rax
  400a04:	8b 04 85 40 30 40 00 	mov    0x403040(,%rax,4),%eax
  400a0b:	39 c1                	cmp    %eax,%ecx
  400a0d:	75 12                	jne    400a21 <printBoard+0x10d>
                putCharColor(c, GREEN);
  400a0f:	0f be 45 f7          	movsbl -0x9(%rbp),%eax
  400a13:	be 02 00 00 00       	mov    $0x2,%esi
  400a18:	89 c7                	mov    %eax,%edi
  400a1a:	e8 fe 0b 00 00       	callq  40161d <putCharColor>
  400a1f:	eb 10                	jmp    400a31 <printBoard+0x11d>
            }
            else {
                putCharColor(c, GREY);
  400a21:	0f be 45 f7          	movsbl -0x9(%rbp),%eax
  400a25:	be 07 00 00 00       	mov    $0x7,%esi
  400a2a:	89 c7                	mov    %eax,%edi
  400a2c:	e8 ec 0b 00 00       	callq  40161d <putCharColor>
            }
            if (j!=LENGTH-1)
  400a31:	83 7d f8 08          	cmpl   $0x8,-0x8(%rbp)
  400a35:	74 0a                	je     400a41 <printBoard+0x12d>
                putChar(' ');
  400a37:	bf 20 00 00 00       	mov    $0x20,%edi
  400a3c:	e8 1b 0c 00 00       	callq  40165c <putChar>
        for (int j=0 ; j<LENGTH ; j++) {
  400a41:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  400a45:	83 7d f8 08          	cmpl   $0x8,-0x8(%rbp)
  400a49:	0f 8e 1d ff ff ff    	jle    40096c <printBoard+0x58>
        }
        print(" |");
  400a4f:	bf a8 31 40 00       	mov    $0x4031a8,%edi
  400a54:	e8 b3 05 00 00       	callq  40100c <print>
        putChar('\n');
  400a59:	bf 0a 00 00 00       	mov    $0xa,%edi
  400a5e:	e8 f9 0b 00 00       	callq  40165c <putChar>
    for (int i=0 ; i<LENGTH ; i++) {
  400a63:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  400a67:	83 7d fc 08          	cmpl   $0x8,-0x4(%rbp)
  400a6b:	0f 8e cb fe ff ff    	jle    40093c <printBoard+0x28>
    }
    print(SPACES);
  400a71:	bf 84 31 40 00       	mov    $0x403184,%edi
  400a76:	e8 91 05 00 00       	callq  40100c <print>
    print(LINE);
  400a7b:	bf 8d 31 40 00       	mov    $0x40318d,%edi
  400a80:	e8 87 05 00 00       	callq  40100c <print>
    print(SPACES);
  400a85:	bf 84 31 40 00       	mov    $0x403184,%edi
  400a8a:	e8 7d 05 00 00       	callq  40100c <print>
    print("   1 2 3 4 5 6 7 8 9");
  400a8f:	bf ab 31 40 00       	mov    $0x4031ab,%edi
  400a94:	e8 73 05 00 00       	callq  40100c <print>
}
  400a99:	c9                   	leaveq 
  400a9a:	c3                   	retq   

0000000000400a9b <sudokuInput>:

int sudokuInput(char a, int b, int value) {
  400a9b:	55                   	push   %rbp
  400a9c:	48 89 e5             	mov    %rsp,%rbp
  400a9f:	48 83 ec 20          	sub    $0x20,%rsp
  400aa3:	89 f8                	mov    %edi,%eax
  400aa5:	89 75 e8             	mov    %esi,-0x18(%rbp)
  400aa8:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  400aab:	88 45 ec             	mov    %al,-0x14(%rbp)
        int x;
    if (a <= 'i' && a >= 'a')
  400aae:	80 7d ec 69          	cmpb   $0x69,-0x14(%rbp)
  400ab2:	7f 12                	jg     400ac6 <sudokuInput+0x2b>
  400ab4:	80 7d ec 60          	cmpb   $0x60,-0x14(%rbp)
  400ab8:	7e 0c                	jle    400ac6 <sudokuInput+0x2b>
        x =a -  'a';
  400aba:	0f be 45 ec          	movsbl -0x14(%rbp),%eax
  400abe:	83 e8 61             	sub    $0x61,%eax
  400ac1:	89 45 fc             	mov    %eax,-0x4(%rbp)
  400ac4:	eb 0a                	jmp    400ad0 <sudokuInput+0x35>
    else {
       x  = a - 'A';
  400ac6:	0f be 45 ec          	movsbl -0x14(%rbp),%eax
  400aca:	83 e8 41             	sub    $0x41,%eax
  400acd:	89 45 fc             	mov    %eax,-0x4(%rbp)
    }

    int y = b-1;
  400ad0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  400ad3:	83 e8 01             	sub    $0x1,%eax
  400ad6:	89 45 f8             	mov    %eax,-0x8(%rbp)
        if (x >= LENGTH || x < 0 || y >= LENGTH || y < 0)
  400ad9:	83 7d fc 08          	cmpl   $0x8,-0x4(%rbp)
  400add:	7f 12                	jg     400af1 <sudokuInput+0x56>
  400adf:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400ae3:	78 0c                	js     400af1 <sudokuInput+0x56>
  400ae5:	83 7d f8 08          	cmpl   $0x8,-0x8(%rbp)
  400ae9:	7f 06                	jg     400af1 <sudokuInput+0x56>
  400aeb:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  400aef:	79 0a                	jns    400afb <sudokuInput+0x60>
        return OUT_OF_BOUNDS;
  400af1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  400af6:	e9 df 00 00 00       	jmpq   400bda <sudokuInput+0x13f>

    if (boardTemplate[x][y]>0)
  400afb:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400afe:	48 63 c8             	movslq %eax,%rcx
  400b01:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400b04:	48 63 d0             	movslq %eax,%rdx
  400b07:	48 89 d0             	mov    %rdx,%rax
  400b0a:	48 c1 e0 03          	shl    $0x3,%rax
  400b0e:	48 01 d0             	add    %rdx,%rax
  400b11:	48 01 c8             	add    %rcx,%rax
  400b14:	8b 04 85 40 30 40 00 	mov    0x403040(,%rax,4),%eax
  400b1b:	85 c0                	test   %eax,%eax
  400b1d:	7e 0a                	jle    400b29 <sudokuInput+0x8e>
        return PRED_VALUE;
  400b1f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  400b24:	e9 b1 00 00 00       	jmpq   400bda <sudokuInput+0x13f>
    int aux = board[x][y];
  400b29:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400b2c:	48 63 c8             	movslq %eax,%rcx
  400b2f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400b32:	48 63 d0             	movslq %eax,%rdx
  400b35:	48 89 d0             	mov    %rdx,%rax
  400b38:	48 c1 e0 03          	shl    $0x3,%rax
  400b3c:	48 01 d0             	add    %rdx,%rax
  400b3f:	48 01 c8             	add    %rcx,%rax
  400b42:	8b 04 85 80 42 40 00 	mov    0x404280(,%rax,4),%eax
  400b49:	89 45 f4             	mov    %eax,-0xc(%rbp)
    board[x][y] = 0;
  400b4c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400b4f:	48 63 c8             	movslq %eax,%rcx
  400b52:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400b55:	48 63 d0             	movslq %eax,%rdx
  400b58:	48 89 d0             	mov    %rdx,%rax
  400b5b:	48 c1 e0 03          	shl    $0x3,%rax
  400b5f:	48 01 d0             	add    %rdx,%rax
  400b62:	48 01 c8             	add    %rcx,%rax
  400b65:	c7 04 85 80 42 40 00 	movl   $0x0,0x404280(,%rax,4)
  400b6c:	00 00 00 00 

    if (possibleMove(x,y,value)) {
  400b70:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  400b73:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  400b76:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400b79:	89 ce                	mov    %ecx,%esi
  400b7b:	89 c7                	mov    %eax,%edi
  400b7d:	e8 27 fb ff ff       	callq  4006a9 <possibleMove>
  400b82:	85 c0                	test   %eax,%eax
  400b84:	74 2b                	je     400bb1 <sudokuInput+0x116>
        board[x][y] = value;
  400b86:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400b89:	48 63 c8             	movslq %eax,%rcx
  400b8c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400b8f:	48 63 d0             	movslq %eax,%rdx
  400b92:	48 89 d0             	mov    %rdx,%rax
  400b95:	48 c1 e0 03          	shl    $0x3,%rax
  400b99:	48 01 d0             	add    %rdx,%rax
  400b9c:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  400ba0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  400ba3:	89 04 95 80 42 40 00 	mov    %eax,0x404280(,%rdx,4)
        return 0;
  400baa:	b8 00 00 00 00       	mov    $0x0,%eax
  400baf:	eb 29                	jmp    400bda <sudokuInput+0x13f>
    }
    board[x][y] = aux;
  400bb1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400bb4:	48 63 c8             	movslq %eax,%rcx
  400bb7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400bba:	48 63 d0             	movslq %eax,%rdx
  400bbd:	48 89 d0             	mov    %rdx,%rax
  400bc0:	48 c1 e0 03          	shl    $0x3,%rax
  400bc4:	48 01 d0             	add    %rdx,%rax
  400bc7:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  400bcb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400bce:	89 04 95 80 42 40 00 	mov    %eax,0x404280(,%rdx,4)
    return INVALID_INPUT;
  400bd5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
  400bda:	c9                   	leaveq 
  400bdb:	c3                   	retq   

0000000000400bdc <initSudoku>:

void initSudoku() {
  400bdc:	55                   	push   %rbp
  400bdd:	48 89 e5             	mov    %rsp,%rbp
  400be0:	48 83 ec 10          	sub    $0x10,%rsp
    for (int i=0 ; i<LENGTH ; i++) {
  400be4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  400beb:	eb 57                	jmp    400c44 <initSudoku+0x68>
        for (int j=0 ; j<LENGTH ; j++)
  400bed:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  400bf4:	eb 44                	jmp    400c3a <initSudoku+0x5e>
            board[i][j] = boardTemplate[i][j];
  400bf6:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400bf9:	48 63 c8             	movslq %eax,%rcx
  400bfc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400bff:	48 63 d0             	movslq %eax,%rdx
  400c02:	48 89 d0             	mov    %rdx,%rax
  400c05:	48 c1 e0 03          	shl    $0x3,%rax
  400c09:	48 01 d0             	add    %rdx,%rax
  400c0c:	48 01 c8             	add    %rcx,%rax
  400c0f:	8b 0c 85 40 30 40 00 	mov    0x403040(,%rax,4),%ecx
  400c16:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400c19:	48 63 f0             	movslq %eax,%rsi
  400c1c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400c1f:	48 63 d0             	movslq %eax,%rdx
  400c22:	48 89 d0             	mov    %rdx,%rax
  400c25:	48 c1 e0 03          	shl    $0x3,%rax
  400c29:	48 01 d0             	add    %rdx,%rax
  400c2c:	48 01 f0             	add    %rsi,%rax
  400c2f:	89 0c 85 80 42 40 00 	mov    %ecx,0x404280(,%rax,4)
        for (int j=0 ; j<LENGTH ; j++)
  400c36:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  400c3a:	83 7d f8 08          	cmpl   $0x8,-0x8(%rbp)
  400c3e:	7e b6                	jle    400bf6 <initSudoku+0x1a>
    for (int i=0 ; i<LENGTH ; i++) {
  400c40:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  400c44:	83 7d fc 08          	cmpl   $0x8,-0x4(%rbp)
  400c48:	7e a3                	jle    400bed <initSudoku+0x11>
    }
  400c4a:	c9                   	leaveq 
  400c4b:	c3                   	retq   

0000000000400c4c <initStopWatch>:
static int lastTick;
static int stopped;;
static int started;;
static int accumTicks;

void initStopWatch() {
  400c4c:	55                   	push   %rbp
  400c4d:	48 89 e5             	mov    %rsp,%rbp
    tickss = startTicks = lastTick = stopped = started = accumTicks = 0;
  400c50:	c7 05 4a 44 00 00 00 	movl   $0x0,0x444a(%rip)        # 4050a4 <accumTicks>
  400c57:	00 00 00 
  400c5a:	8b 05 44 44 00 00    	mov    0x4444(%rip),%eax        # 4050a4 <accumTicks>
  400c60:	89 05 3a 44 00 00    	mov    %eax,0x443a(%rip)        # 4050a0 <started>
  400c66:	8b 05 34 44 00 00    	mov    0x4434(%rip),%eax        # 4050a0 <started>
  400c6c:	89 05 2a 44 00 00    	mov    %eax,0x442a(%rip)        # 40509c <stopped>
  400c72:	8b 05 24 44 00 00    	mov    0x4424(%rip),%eax        # 40509c <stopped>
  400c78:	89 05 1a 44 00 00    	mov    %eax,0x441a(%rip)        # 405098 <lastTick>
  400c7e:	8b 05 14 44 00 00    	mov    0x4414(%rip),%eax        # 405098 <lastTick>
  400c84:	48 98                	cltq   
  400c86:	48 89 05 03 44 00 00 	mov    %rax,0x4403(%rip)        # 405090 <startTicks>
  400c8d:	48 8b 05 fc 43 00 00 	mov    0x43fc(%rip),%rax        # 405090 <startTicks>
  400c94:	48 89 05 ed 43 00 00 	mov    %rax,0x43ed(%rip)        # 405088 <tickss>
}
  400c9b:	5d                   	pop    %rbp
  400c9c:	c3                   	retq   

0000000000400c9d <stopWatchStart>:


void stopWatchStart() {
  400c9d:	55                   	push   %rbp
  400c9e:	48 89 e5             	mov    %rsp,%rbp
  400ca1:	48 83 ec 10          	sub    $0x10,%rsp
    int aux = ticks();
  400ca5:	b8 00 00 00 00       	mov    $0x0,%eax
  400caa:	e8 af 0a 00 00       	callq  40175e <ticks>
  400caf:	89 45 fc             	mov    %eax,-0x4(%rbp)
    do {
        startTicks = ticks();
  400cb2:	b8 00 00 00 00       	mov    $0x0,%eax
  400cb7:	e8 a2 0a 00 00       	callq  40175e <ticks>
  400cbc:	48 98                	cltq   
  400cbe:	48 89 05 cb 43 00 00 	mov    %rax,0x43cb(%rip)        # 405090 <startTicks>
    }
    while (startTicks == aux);
  400cc5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400cc8:	48 63 d0             	movslq %eax,%rdx
  400ccb:	48 8b 05 be 43 00 00 	mov    0x43be(%rip),%rax        # 405090 <startTicks>
  400cd2:	48 39 c2             	cmp    %rax,%rdx
  400cd5:	74 db                	je     400cb2 <stopWatchStart+0x15>
    lastTick = startTicks;
  400cd7:	48 8b 05 b2 43 00 00 	mov    0x43b2(%rip),%rax        # 405090 <startTicks>
  400cde:	89 05 b4 43 00 00    	mov    %eax,0x43b4(%rip)        # 405098 <lastTick>
    stopped = 0;
  400ce4:	c7 05 ae 43 00 00 00 	movl   $0x0,0x43ae(%rip)        # 40509c <stopped>
  400ceb:	00 00 00 
    started = 1;
  400cee:	c7 05 a8 43 00 00 01 	movl   $0x1,0x43a8(%rip)        # 4050a0 <started>
  400cf5:	00 00 00 
}
  400cf8:	c9                   	leaveq 
  400cf9:	c3                   	retq   

0000000000400cfa <stopWatchChanged>:

int stopWatchChanged() {
  400cfa:	55                   	push   %rbp
  400cfb:	48 89 e5             	mov    %rsp,%rbp
    if (!started || stopped)
  400cfe:	8b 05 9c 43 00 00    	mov    0x439c(%rip),%eax        # 4050a0 <started>
  400d04:	85 c0                	test   %eax,%eax
  400d06:	74 0a                	je     400d12 <stopWatchChanged+0x18>
  400d08:	8b 05 8e 43 00 00    	mov    0x438e(%rip),%eax        # 40509c <stopped>
  400d0e:	85 c0                	test   %eax,%eax
  400d10:	74 07                	je     400d19 <stopWatchChanged+0x1f>
        return 0;
  400d12:	b8 00 00 00 00       	mov    $0x0,%eax
  400d17:	eb 32                	jmp    400d4b <stopWatchChanged+0x51>
    tickss = ticks();
  400d19:	b8 00 00 00 00       	mov    $0x0,%eax
  400d1e:	e8 3b 0a 00 00       	callq  40175e <ticks>
  400d23:	48 98                	cltq   
  400d25:	48 89 05 5c 43 00 00 	mov    %rax,0x435c(%rip)        # 405088 <tickss>
    return tickss - lastTick >= 2;
  400d2c:	48 8b 15 55 43 00 00 	mov    0x4355(%rip),%rdx        # 405088 <tickss>
  400d33:	8b 05 5f 43 00 00    	mov    0x435f(%rip),%eax        # 405098 <lastTick>
  400d39:	48 98                	cltq   
  400d3b:	48 29 c2             	sub    %rax,%rdx
  400d3e:	48 89 d0             	mov    %rdx,%rax
  400d41:	48 83 f8 01          	cmp    $0x1,%rax
  400d45:	0f 9f c0             	setg   %al
  400d48:	0f b6 c0             	movzbl %al,%eax
}
  400d4b:	5d                   	pop    %rbp
  400d4c:	c3                   	retq   

0000000000400d4d <twoDigitsNumToStr>:
// 	  str[len - (i + 1)] = rem + '0';
// 	}
// 	return len+neg;
// }

static void twoDigitsNumToStr(int num, char * buf) {
  400d4d:	55                   	push   %rbp
  400d4e:	48 89 e5             	mov    %rsp,%rbp
  400d51:	48 83 ec 10          	sub    $0x10,%rsp
  400d55:	89 7d fc             	mov    %edi,-0x4(%rbp)
  400d58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if (num<10) {
  400d5c:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
  400d60:	7f 23                	jg     400d85 <twoDigitsNumToStr+0x38>
        buf[0] = '0';
  400d62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d66:	c6 00 30             	movb   $0x30,(%rax)
        itoa(num, &buf[1],10);
  400d69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d6d:	48 8d 48 01          	lea    0x1(%rax),%rcx
  400d71:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400d74:	ba 0a 00 00 00       	mov    $0xa,%edx
  400d79:	48 89 ce             	mov    %rcx,%rsi
  400d7c:	89 c7                	mov    %eax,%edi
  400d7e:	e8 65 03 00 00       	callq  4010e8 <itoa>
  400d83:	eb 16                	jmp    400d9b <twoDigitsNumToStr+0x4e>
    }
    else {
        itoa(num, &buf[0],10);
  400d85:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  400d89:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400d8c:	ba 0a 00 00 00       	mov    $0xa,%edx
  400d91:	48 89 ce             	mov    %rcx,%rsi
  400d94:	89 c7                	mov    %eax,%edi
  400d96:	e8 4d 03 00 00       	callq  4010e8 <itoa>
    }  
}
  400d9b:	c9                   	leaveq 
  400d9c:	c3                   	retq   

0000000000400d9d <stopWatchStop>:

void stopWatchStop() {
  400d9d:	55                   	push   %rbp
  400d9e:	48 89 e5             	mov    %rsp,%rbp
    if (stopped)
  400da1:	8b 05 f5 42 00 00    	mov    0x42f5(%rip),%eax        # 40509c <stopped>
  400da7:	85 c0                	test   %eax,%eax
  400da9:	74 02                	je     400dad <stopWatchStop+0x10>
        return;
  400dab:	eb 34                	jmp    400de1 <stopWatchStop+0x44>
    stopped = 1;
  400dad:	c7 05 e5 42 00 00 01 	movl   $0x1,0x42e5(%rip)        # 40509c <stopped>
  400db4:	00 00 00 
    accumTicks += ticks() - startTicks;
  400db7:	b8 00 00 00 00       	mov    $0x0,%eax
  400dbc:	e8 9d 09 00 00       	callq  40175e <ticks>
  400dc1:	48 63 d0             	movslq %eax,%rdx
  400dc4:	48 8b 05 c5 42 00 00 	mov    0x42c5(%rip),%rax        # 405090 <startTicks>
  400dcb:	48 29 c2             	sub    %rax,%rdx
  400dce:	48 89 d0             	mov    %rdx,%rax
  400dd1:	89 c2                	mov    %eax,%edx
  400dd3:	8b 05 cb 42 00 00    	mov    0x42cb(%rip),%eax        # 4050a4 <accumTicks>
  400dd9:	01 d0                	add    %edx,%eax
  400ddb:	89 05 c3 42 00 00    	mov    %eax,0x42c3(%rip)        # 4050a4 <accumTicks>
}
  400de1:	5d                   	pop    %rbp
  400de2:	c3                   	retq   

0000000000400de3 <printStopWatch>:

void printStopWatch() {
  400de3:	55                   	push   %rbp
  400de4:	48 89 e5             	mov    %rsp,%rbp
  400de7:	48 83 ec 30          	sub    $0x30,%rsp
    
    char template[] = "00:00:00,00\n";
  400deb:	48 b8 30 30 3a 30 30 	movabs $0x30303a30303a3030,%rax
  400df2:	3a 30 30 
  400df5:	48 89 45 d7          	mov    %rax,-0x29(%rbp)
  400df9:	c7 45 df 2c 30 30 0a 	movl   $0xa30302c,-0x21(%rbp)
  400e00:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)

    if (!started) {
  400e04:	8b 05 96 42 00 00    	mov    0x4296(%rip),%eax        # 4050a0 <started>
  400e0a:	85 c0                	test   %eax,%eax
  400e0c:	75 11                	jne    400e1f <printStopWatch+0x3c>
        print(template);
  400e0e:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  400e12:	48 89 c7             	mov    %rax,%rdi
  400e15:	e8 f2 01 00 00       	callq  40100c <print>
  400e1a:	e9 a6 01 00 00       	jmpq   400fc5 <printStopWatch+0x1e2>
        return;
    }
    int total_sec, hh, mm, ss, cs;
    lastTick = tickss = ticks();
  400e1f:	b8 00 00 00 00       	mov    $0x0,%eax
  400e24:	e8 35 09 00 00       	callq  40175e <ticks>
  400e29:	48 98                	cltq   
  400e2b:	48 89 05 56 42 00 00 	mov    %rax,0x4256(%rip)        # 405088 <tickss>
  400e32:	48 8b 05 4f 42 00 00 	mov    0x424f(%rip),%rax        # 405088 <tickss>
  400e39:	89 05 59 42 00 00    	mov    %eax,0x4259(%rip)        # 405098 <lastTick>
    long total_ms = (tickss - startTicks + (accumTicks))*55;
  400e3f:	48 8b 15 42 42 00 00 	mov    0x4242(%rip),%rdx        # 405088 <tickss>
  400e46:	48 8b 05 43 42 00 00 	mov    0x4243(%rip),%rax        # 405090 <startTicks>
  400e4d:	48 29 c2             	sub    %rax,%rdx
  400e50:	8b 05 4e 42 00 00    	mov    0x424e(%rip),%eax        # 4050a4 <accumTicks>
  400e56:	48 98                	cltq   
  400e58:	48 01 c2             	add    %rax,%rdx
  400e5b:	48 89 d0             	mov    %rdx,%rax
  400e5e:	48 c1 e0 02          	shl    $0x2,%rax
  400e62:	48 01 d0             	add    %rdx,%rax
  400e65:	48 01 c0             	add    %rax,%rax
  400e68:	48 01 d0             	add    %rdx,%rax
  400e6b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  400e72:	00 
  400e73:	48 01 d0             	add    %rdx,%rax
  400e76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    total_sec = total_ms/1000;
  400e7a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400e7e:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
  400e85:	9b c4 20 
  400e88:	48 89 c8             	mov    %rcx,%rax
  400e8b:	48 f7 ea             	imul   %rdx
  400e8e:	48 c1 fa 07          	sar    $0x7,%rdx
  400e92:	48 89 c8             	mov    %rcx,%rax
  400e95:	48 c1 f8 3f          	sar    $0x3f,%rax
  400e99:	48 29 c2             	sub    %rax,%rdx
  400e9c:	48 89 d0             	mov    %rdx,%rax
  400e9f:	89 45 f4             	mov    %eax,-0xc(%rbp)
    cs = (total_ms % 1000)/100;
  400ea2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  400ea6:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
  400ead:	9b c4 20 
  400eb0:	48 89 f0             	mov    %rsi,%rax
  400eb3:	48 f7 ea             	imul   %rdx
  400eb6:	48 c1 fa 07          	sar    $0x7,%rdx
  400eba:	48 89 f0             	mov    %rsi,%rax
  400ebd:	48 c1 f8 3f          	sar    $0x3f,%rax
  400ec1:	48 89 d1             	mov    %rdx,%rcx
  400ec4:	48 29 c1             	sub    %rax,%rcx
  400ec7:	48 69 c1 e8 03 00 00 	imul   $0x3e8,%rcx,%rax
  400ece:	48 29 c6             	sub    %rax,%rsi
  400ed1:	48 89 f1             	mov    %rsi,%rcx
  400ed4:	48 ba 0b d7 a3 70 3d 	movabs $0xa3d70a3d70a3d70b,%rdx
  400edb:	0a d7 a3 
  400ede:	48 89 c8             	mov    %rcx,%rax
  400ee1:	48 f7 ea             	imul   %rdx
  400ee4:	48 8d 04 0a          	lea    (%rdx,%rcx,1),%rax
  400ee8:	48 c1 f8 06          	sar    $0x6,%rax
  400eec:	48 89 c2             	mov    %rax,%rdx
  400eef:	48 89 c8             	mov    %rcx,%rax
  400ef2:	48 c1 f8 3f          	sar    $0x3f,%rax
  400ef6:	48 29 c2             	sub    %rax,%rdx
  400ef9:	48 89 d0             	mov    %rdx,%rax
  400efc:	89 45 f0             	mov    %eax,-0x10(%rbp)

    hh = total_sec/3600;
  400eff:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  400f02:	ba c5 b3 a2 91       	mov    $0x91a2b3c5,%edx
  400f07:	89 c8                	mov    %ecx,%eax
  400f09:	f7 ea                	imul   %edx
  400f0b:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
  400f0e:	c1 f8 0b             	sar    $0xb,%eax
  400f11:	89 c2                	mov    %eax,%edx
  400f13:	89 c8                	mov    %ecx,%eax
  400f15:	c1 f8 1f             	sar    $0x1f,%eax
  400f18:	29 c2                	sub    %eax,%edx
  400f1a:	89 d0                	mov    %edx,%eax
  400f1c:	89 45 ec             	mov    %eax,-0x14(%rbp)
	mm = (total_sec - hh*3600)/60;
  400f1f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400f22:	69 d0 f0 f1 ff ff    	imul   $0xfffff1f0,%eax,%edx
  400f28:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400f2b:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
  400f2e:	ba 89 88 88 88       	mov    $0x88888889,%edx
  400f33:	89 c8                	mov    %ecx,%eax
  400f35:	f7 ea                	imul   %edx
  400f37:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
  400f3a:	c1 f8 05             	sar    $0x5,%eax
  400f3d:	89 c2                	mov    %eax,%edx
  400f3f:	89 c8                	mov    %ecx,%eax
  400f41:	c1 f8 1f             	sar    $0x1f,%eax
  400f44:	29 c2                	sub    %eax,%edx
  400f46:	89 d0                	mov    %edx,%eax
  400f48:	89 45 e8             	mov    %eax,-0x18(%rbp)
	ss = total_sec - hh*3600 - mm*60;
  400f4b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400f4e:	69 d0 f0 f1 ff ff    	imul   $0xfffff1f0,%eax,%edx
  400f54:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400f57:	01 c2                	add    %eax,%edx
  400f59:	8b 45 e8             	mov    -0x18(%rbp),%eax
  400f5c:	6b c0 c4             	imul   $0xffffffc4,%eax,%eax
  400f5f:	01 d0                	add    %edx,%eax
  400f61:	89 45 e4             	mov    %eax,-0x1c(%rbp)

    twoDigitsNumToStr(hh,&template[0]);
  400f64:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
  400f68:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400f6b:	48 89 d6             	mov    %rdx,%rsi
  400f6e:	89 c7                	mov    %eax,%edi
  400f70:	e8 d8 fd ff ff       	callq  400d4d <twoDigitsNumToStr>
    twoDigitsNumToStr(mm,&template[3]);
  400f75:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  400f79:	48 8d 50 03          	lea    0x3(%rax),%rdx
  400f7d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  400f80:	48 89 d6             	mov    %rdx,%rsi
  400f83:	89 c7                	mov    %eax,%edi
  400f85:	e8 c3 fd ff ff       	callq  400d4d <twoDigitsNumToStr>
    twoDigitsNumToStr(ss,&template[6]);
  400f8a:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  400f8e:	48 8d 50 06          	lea    0x6(%rax),%rdx
  400f92:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  400f95:	48 89 d6             	mov    %rdx,%rsi
  400f98:	89 c7                	mov    %eax,%edi
  400f9a:	e8 ae fd ff ff       	callq  400d4d <twoDigitsNumToStr>
    twoDigitsNumToStr(cs,&template[9]);
  400f9f:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  400fa3:	48 8d 50 09          	lea    0x9(%rax),%rdx
  400fa7:	8b 45 f0             	mov    -0x10(%rbp),%eax
  400faa:	48 89 d6             	mov    %rdx,%rsi
  400fad:	89 c7                	mov    %eax,%edi
  400faf:	e8 99 fd ff ff       	callq  400d4d <twoDigitsNumToStr>
    printColor(template,RED);
  400fb4:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  400fb8:	be 04 00 00 00       	mov    $0x4,%esi
  400fbd:	48 89 c7             	mov    %rax,%rdi
  400fc0:	e8 02 00 00 00       	callq  400fc7 <printColor>

  400fc5:	c9                   	leaveq 
  400fc6:	c3                   	retq   

0000000000400fc7 <printColor>:
//        Utiliza: strlength()   
// ----------------------------------------------------------
// Argumentos:
//      1. El string a imprimir
// ----------------------------------------------------------
void printColor(char * string, char color) {
  400fc7:	55                   	push   %rbp
  400fc8:	48 89 e5             	mov    %rsp,%rbp
  400fcb:	48 83 ec 20          	sub    $0x20,%rsp
  400fcf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400fd3:	89 f0                	mov    %esi,%eax
  400fd5:	88 45 e4             	mov    %al,-0x1c(%rbp)
	if (string[0]) {
  400fd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400fdc:	0f b6 00             	movzbl (%rax),%eax
  400fdf:	84 c0                	test   %al,%al
  400fe1:	74 27                	je     40100a <printColor+0x43>
		int len = strlength(string);
  400fe3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400fe7:	48 89 c7             	mov    %rax,%rdi
  400fea:	e8 3c 00 00 00       	callq  40102b <strlength>
  400fef:	89 45 fc             	mov    %eax,-0x4(%rbp)
		system_write(STDOUT, string, len, color);
  400ff2:	0f be 4d e4          	movsbl -0x1c(%rbp),%ecx
  400ff6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  400ff9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ffd:	48 89 c6             	mov    %rax,%rsi
  401000:	bf 01 00 00 00       	mov    $0x1,%edi
  401005:	e8 96 f0 ff ff       	callq  4000a0 <system_write>
	}
    	
}
  40100a:	c9                   	leaveq 
  40100b:	c3                   	retq   

000000000040100c <print>:

void print(char * string) {
  40100c:	55                   	push   %rbp
  40100d:	48 89 e5             	mov    %rsp,%rbp
  401010:	48 83 ec 10          	sub    $0x10,%rsp
  401014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	printColor(string,GREY);
  401018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40101c:	be 07 00 00 00       	mov    $0x7,%esi
  401021:	48 89 c7             	mov    %rax,%rdi
  401024:	e8 9e ff ff ff       	callq  400fc7 <printColor>
}
  401029:	c9                   	leaveq 
  40102a:	c3                   	retq   

000000000040102b <strlength>:
//      1. El puntero del string a calcular
// ----------------------------------------------------------
// Retorna:
//     el length 
// ----------------------------------------------------------
int strlength(char * string) {
  40102b:	55                   	push   %rbp
  40102c:	48 89 e5             	mov    %rsp,%rbp
  40102f:	48 83 ec 18          	sub    $0x18,%rsp
  401033:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int i;
	for (i=0 ; string[i] ; i++);
  401037:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40103e:	eb 04                	jmp    401044 <strlength+0x19>
  401040:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  401044:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401047:	48 63 d0             	movslq %eax,%rdx
  40104a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40104e:	48 01 d0             	add    %rdx,%rax
  401051:	0f b6 00             	movzbl (%rax),%eax
  401054:	84 c0                	test   %al,%al
  401056:	75 e8                	jne    401040 <strlength+0x15>
	return i;
  401058:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  40105b:	c9                   	leaveq 
  40105c:	c3                   	retq   

000000000040105d <swap>:
// 	  str[len - (i + 1)] = rem + '0';
// 	}
// 	return len+neg;
// }

void swap(char* a, char* b) {
  40105d:	55                   	push   %rbp
  40105e:	48 89 e5             	mov    %rsp,%rbp
  401061:	48 83 ec 20          	sub    $0x20,%rsp
  401065:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401069:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	char aux = *a;
  40106d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401071:	0f b6 00             	movzbl (%rax),%eax
  401074:	88 45 ff             	mov    %al,-0x1(%rbp)
	*a = *b;
  401077:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40107b:	0f b6 10             	movzbl (%rax),%edx
  40107e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401082:	88 10                	mov    %dl,(%rax)
	*b = aux;
  401084:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401088:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  40108c:	88 10                	mov    %dl,(%rax)
}
  40108e:	c9                   	leaveq 
  40108f:	c3                   	retq   

0000000000401090 <reverse>:
void reverse(char str[], int length)
{
  401090:	55                   	push   %rbp
  401091:	48 89 e5             	mov    %rsp,%rbp
  401094:	48 83 ec 20          	sub    $0x20,%rsp
  401098:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40109c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    int start = 0;
  40109f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    int end = length -1;
  4010a6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4010a9:	83 e8 01             	sub    $0x1,%eax
  4010ac:	89 45 f8             	mov    %eax,-0x8(%rbp)
    while (start < end)
  4010af:	eb 2d                	jmp    4010de <reverse+0x4e>
    {
        swap(str+start, str+end);
  4010b1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4010b4:	48 63 d0             	movslq %eax,%rdx
  4010b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010bb:	48 01 c2             	add    %rax,%rdx
  4010be:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4010c1:	48 63 c8             	movslq %eax,%rcx
  4010c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010c8:	48 01 c8             	add    %rcx,%rax
  4010cb:	48 89 d6             	mov    %rdx,%rsi
  4010ce:	48 89 c7             	mov    %rax,%rdi
  4010d1:	e8 87 ff ff ff       	callq  40105d <swap>
        start++;
  4010d6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
        end--;
  4010da:	83 6d f8 01          	subl   $0x1,-0x8(%rbp)
    while (start < end)
  4010de:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4010e1:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  4010e4:	7c cb                	jl     4010b1 <reverse+0x21>
    }
}
  4010e6:	c9                   	leaveq 
  4010e7:	c3                   	retq   

00000000004010e8 <itoa>:
 
// Implementation of itoa()
char* itoa(int num, char* str, int base)
{
  4010e8:	55                   	push   %rbp
  4010e9:	48 89 e5             	mov    %rsp,%rbp
  4010ec:	48 83 ec 20          	sub    $0x20,%rsp
  4010f0:	89 7d ec             	mov    %edi,-0x14(%rbp)
  4010f3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4010f7:	89 55 e8             	mov    %edx,-0x18(%rbp)
    int i = 0;
  4010fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    int isNegative = 0;
  401101:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
 
    /* Handle 0 explicitly, otherwise empty string is printed for 0 */
    if (num == 0)
  401108:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  40110c:	75 2f                	jne    40113d <itoa+0x55>
    {
        str[i++] = '0';
  40110e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401111:	8d 50 01             	lea    0x1(%rax),%edx
  401114:	89 55 fc             	mov    %edx,-0x4(%rbp)
  401117:	48 63 d0             	movslq %eax,%rdx
  40111a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40111e:	48 01 d0             	add    %rdx,%rax
  401121:	c6 00 30             	movb   $0x30,(%rax)
        str[i] = '\0';
  401124:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401127:	48 63 d0             	movslq %eax,%rdx
  40112a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40112e:	48 01 d0             	add    %rdx,%rax
  401131:	c6 00 00             	movb   $0x0,(%rax)
        return str;
  401134:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401138:	e9 9c 00 00 00       	jmpq   4011d9 <itoa+0xf1>
    }
 
    // In standard itoa(), negative numbers are handled only with
    // base 10. Otherwise numbers are considered unsigned.
    if (num < 0 && base == 10)
  40113d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  401141:	79 10                	jns    401153 <itoa+0x6b>
  401143:	83 7d e8 0a          	cmpl   $0xa,-0x18(%rbp)
  401147:	75 0a                	jne    401153 <itoa+0x6b>
    {
        isNegative = 1;
  401149:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
        num = -num;
  401150:	f7 5d ec             	negl   -0x14(%rbp)
    }
 
    // Process individual digits
    while (num != 0)
  401153:	eb 3d                	jmp    401192 <itoa+0xaa>
    {
        int rem = num % base;
  401155:	8b 45 ec             	mov    -0x14(%rbp),%eax
  401158:	99                   	cltd   
  401159:	f7 7d e8             	idivl  -0x18(%rbp)
  40115c:	89 55 f4             	mov    %edx,-0xc(%rbp)
        str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
  40115f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401162:	8d 50 01             	lea    0x1(%rax),%edx
  401165:	89 55 fc             	mov    %edx,-0x4(%rbp)
  401168:	48 63 d0             	movslq %eax,%rdx
  40116b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40116f:	48 01 d0             	add    %rdx,%rax
  401172:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  401176:	7e 08                	jle    401180 <itoa+0x98>
  401178:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40117b:	83 c2 57             	add    $0x57,%edx
  40117e:	eb 06                	jmp    401186 <itoa+0x9e>
  401180:	8b 55 f4             	mov    -0xc(%rbp),%edx
  401183:	83 c2 30             	add    $0x30,%edx
  401186:	88 10                	mov    %dl,(%rax)
        num = num/base;
  401188:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40118b:	99                   	cltd   
  40118c:	f7 7d e8             	idivl  -0x18(%rbp)
  40118f:	89 45 ec             	mov    %eax,-0x14(%rbp)
    while (num != 0)
  401192:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  401196:	75 bd                	jne    401155 <itoa+0x6d>
    }
 
    // If number is negative, append '-'
    if (isNegative)
  401198:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  40119c:	74 16                	je     4011b4 <itoa+0xcc>
        str[i++] = '-';
  40119e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4011a1:	8d 50 01             	lea    0x1(%rax),%edx
  4011a4:	89 55 fc             	mov    %edx,-0x4(%rbp)
  4011a7:	48 63 d0             	movslq %eax,%rdx
  4011aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4011ae:	48 01 d0             	add    %rdx,%rax
  4011b1:	c6 00 2d             	movb   $0x2d,(%rax)
 
    str[i] = '\0'; // Append string terminator
  4011b4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4011b7:	48 63 d0             	movslq %eax,%rdx
  4011ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4011be:	48 01 d0             	add    %rdx,%rax
  4011c1:	c6 00 00             	movb   $0x0,(%rax)
 
    // Reverse the string
    reverse(str, i);
  4011c4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4011c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4011cb:	89 d6                	mov    %edx,%esi
  4011cd:	48 89 c7             	mov    %rax,%rdi
  4011d0:	e8 bb fe ff ff       	callq  401090 <reverse>
 
    return str;
  4011d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
}
  4011d9:	c9                   	leaveq 
  4011da:	c3                   	retq   

00000000004011db <power>:
//      2. La potencia de 10. Ejemplo: (5 ^ p)
// ----------------------------------------------------------
// Retorna:
//      El numero final
// ----------------------------------------------------------
int power(int num, int p) {
  4011db:	55                   	push   %rbp
  4011dc:	48 89 e5             	mov    %rsp,%rbp
  4011df:	48 83 ec 18          	sub    $0x18,%rsp
  4011e3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  4011e6:	89 75 e8             	mov    %esi,-0x18(%rbp)
	int res = 1;
  4011e9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
	for(int i = 0; i < p; i++) {
  4011f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  4011f7:	eb 13                	jmp    40120c <power+0x31>
		res *= 10;
  4011f9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4011fc:	89 d0                	mov    %edx,%eax
  4011fe:	c1 e0 02             	shl    $0x2,%eax
  401201:	01 d0                	add    %edx,%eax
  401203:	01 c0                	add    %eax,%eax
  401205:	89 45 fc             	mov    %eax,-0x4(%rbp)
	for(int i = 0; i < p; i++) {
  401208:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  40120c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40120f:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  401212:	7c e5                	jl     4011f9 <power+0x1e>
	}
	return num*res;
  401214:	8b 45 ec             	mov    -0x14(%rbp),%eax
  401217:	0f af 45 fc          	imul   -0x4(%rbp),%eax
}
  40121b:	c9                   	leaveq 
  40121c:	c3                   	retq   

000000000040121d <strToInt>:
//      1. La longitud del string a convertir
// ----------------------------------------------------------
// Retorna:
//      El numero o -1 si algun caracter no es un digito
// ----------------------------------------------------------
int strToInt(char * buff, int len) {
  40121d:	55                   	push   %rbp
  40121e:	48 89 e5             	mov    %rsp,%rbp
  401221:	48 83 ec 20          	sub    $0x20,%rsp
  401225:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401229:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	int res = 0;
  40122c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	for(int i = 0; i < len; i++) {
  401233:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  40123a:	eb 5e                	jmp    40129a <strToInt+0x7d>
		if (buff[i] < '0' || buff[i] > '9') {
  40123c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40123f:	48 63 d0             	movslq %eax,%rdx
  401242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401246:	48 01 d0             	add    %rdx,%rax
  401249:	0f b6 00             	movzbl (%rax),%eax
  40124c:	3c 2f                	cmp    $0x2f,%al
  40124e:	7e 14                	jle    401264 <strToInt+0x47>
  401250:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401253:	48 63 d0             	movslq %eax,%rdx
  401256:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40125a:	48 01 d0             	add    %rdx,%rax
  40125d:	0f b6 00             	movzbl (%rax),%eax
  401260:	3c 39                	cmp    $0x39,%al
  401262:	7e 07                	jle    40126b <strToInt+0x4e>
			return -1;
  401264:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  401269:	eb 3a                	jmp    4012a5 <strToInt+0x88>
		}
		res += power(buff[i]-'0', len-i-1);
  40126b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40126e:	2b 45 f8             	sub    -0x8(%rbp),%eax
  401271:	8d 50 ff             	lea    -0x1(%rax),%edx
  401274:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401277:	48 63 c8             	movslq %eax,%rcx
  40127a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40127e:	48 01 c8             	add    %rcx,%rax
  401281:	0f b6 00             	movzbl (%rax),%eax
  401284:	0f be c0             	movsbl %al,%eax
  401287:	83 e8 30             	sub    $0x30,%eax
  40128a:	89 d6                	mov    %edx,%esi
  40128c:	89 c7                	mov    %eax,%edi
  40128e:	e8 48 ff ff ff       	callq  4011db <power>
  401293:	01 45 fc             	add    %eax,-0x4(%rbp)
	for(int i = 0; i < len; i++) {
  401296:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  40129a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40129d:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  4012a0:	7c 9a                	jl     40123c <strToInt+0x1f>
	}
	return res;
  4012a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  4012a5:	c9                   	leaveq 
  4012a6:	c3                   	retq   

00000000004012a7 <atoi>:

int atoi(char * s) {
  4012a7:	55                   	push   %rbp
  4012a8:	48 89 e5             	mov    %rsp,%rbp
  4012ab:	48 83 ec 08          	sub    $0x8,%rsp
  4012af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return strToInt(s,strlength(s));
  4012b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012b7:	48 89 c7             	mov    %rax,%rdi
  4012ba:	e8 6c fd ff ff       	callq  40102b <strlength>
  4012bf:	89 c2                	mov    %eax,%edx
  4012c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012c5:	89 d6                	mov    %edx,%esi
  4012c7:	48 89 c7             	mov    %rax,%rdi
  4012ca:	e8 4e ff ff ff       	callq  40121d <strToInt>
}
  4012cf:	c9                   	leaveq 
  4012d0:	c3                   	retq   

00000000004012d1 <isDigit>:
//      1. El caracter
// ----------------------------------------------------------
// Retorna:
//      1 si es un digito o -1 si no
// ----------------------------------------------------------
int isDigit(char c) {
  4012d1:	55                   	push   %rbp
  4012d2:	48 89 e5             	mov    %rsp,%rbp
  4012d5:	48 83 ec 08          	sub    $0x8,%rsp
  4012d9:	89 f8                	mov    %edi,%eax
  4012db:	88 45 fc             	mov    %al,-0x4(%rbp)
    return c <= '9' && c >= '0';
  4012de:	80 7d fc 39          	cmpb   $0x39,-0x4(%rbp)
  4012e2:	7f 0d                	jg     4012f1 <isDigit+0x20>
  4012e4:	80 7d fc 2f          	cmpb   $0x2f,-0x4(%rbp)
  4012e8:	7e 07                	jle    4012f1 <isDigit+0x20>
  4012ea:	b8 01 00 00 00       	mov    $0x1,%eax
  4012ef:	eb 05                	jmp    4012f6 <isDigit+0x25>
  4012f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  4012f6:	c9                   	leaveq 
  4012f7:	c3                   	retq   

00000000004012f8 <charToDigit>:
// ----------------------------------------------------------
// Retorna:
//      El valor del digito entero si el char es un numero 
// 		o -1 sino.
// ----------------------------------------------------------
int charToDigit(char c) {
  4012f8:	55                   	push   %rbp
  4012f9:	48 89 e5             	mov    %rsp,%rbp
  4012fc:	48 83 ec 08          	sub    $0x8,%rsp
  401300:	89 f8                	mov    %edi,%eax
  401302:	88 45 fc             	mov    %al,-0x4(%rbp)
    if(isDigit(c)) {
  401305:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  401309:	89 c7                	mov    %eax,%edi
  40130b:	e8 c1 ff ff ff       	callq  4012d1 <isDigit>
  401310:	85 c0                	test   %eax,%eax
  401312:	74 09                	je     40131d <charToDigit+0x25>
		return c - '0';
  401314:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  401318:	83 e8 30             	sub    $0x30,%eax
  40131b:	eb 05                	jmp    401322 <charToDigit+0x2a>
	}
	return -1;
  40131d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  401322:	c9                   	leaveq 
  401323:	c3                   	retq   

0000000000401324 <toLower>:
//      1. El caracter a transformar
// ----------------------------------------------------------
// Retorna:
//      El caracter en minuscula
// ----------------------------------------------------------
char toLower(char c) {
  401324:	55                   	push   %rbp
  401325:	48 89 e5             	mov    %rsp,%rbp
  401328:	48 83 ec 08          	sub    $0x8,%rsp
  40132c:	89 f8                	mov    %edi,%eax
  40132e:	88 45 fc             	mov    %al,-0x4(%rbp)
    if(c >= 'A' && c <= 'Z') {
  401331:	80 7d fc 40          	cmpb   $0x40,-0x4(%rbp)
  401335:	7e 10                	jle    401347 <toLower+0x23>
  401337:	80 7d fc 5a          	cmpb   $0x5a,-0x4(%rbp)
  40133b:	7f 0a                	jg     401347 <toLower+0x23>
        c = c + ('a'-'A');
  40133d:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  401341:	83 c0 20             	add    $0x20,%eax
  401344:	88 45 fc             	mov    %al,-0x4(%rbp)
    }
    return c;
  401347:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
}
  40134b:	c9                   	leaveq 
  40134c:	c3                   	retq   

000000000040134d <toUpper>:

char toUpper(char c) {
  40134d:	55                   	push   %rbp
  40134e:	48 89 e5             	mov    %rsp,%rbp
  401351:	48 83 ec 08          	sub    $0x8,%rsp
  401355:	89 f8                	mov    %edi,%eax
  401357:	88 45 fc             	mov    %al,-0x4(%rbp)
    if (c >= 'a' && c <= 'z') {
  40135a:	80 7d fc 60          	cmpb   $0x60,-0x4(%rbp)
  40135e:	7e 0f                	jle    40136f <toUpper+0x22>
  401360:	80 7d fc 7a          	cmpb   $0x7a,-0x4(%rbp)
  401364:	7f 09                	jg     40136f <toUpper+0x22>
        return c + ('A' - 'a');
  401366:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  40136a:	83 e8 20             	sub    $0x20,%eax
  40136d:	eb 04                	jmp    401373 <toUpper+0x26>
    }
    return c;
  40136f:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
}
  401373:	c9                   	leaveq 
  401374:	c3                   	retq   

0000000000401375 <toNumberAndAdvance>:
// ----------------------------------------------------------
// Retorna:
//      El numero formado o -1 si no encontro ningun numero (imprime que 
//		hubo error)
// ----------------------------------------------------------
int toNumberAndAdvance(char * string, int * index) {
  401375:	55                   	push   %rbp
  401376:	48 89 e5             	mov    %rsp,%rbp
  401379:	41 57                	push   %r15
  40137b:	41 56                	push   %r14
  40137d:	41 55                	push   %r13
  40137f:	41 54                	push   %r12
  401381:	53                   	push   %rbx
  401382:	48 83 ec 58          	sub    $0x58,%rsp
  401386:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40138a:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	int start=0, aux=0, flag=0;
  40138e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
  401395:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
  40139c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
	int * i;
	if (index == NULL) {
  4013a3:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
  4013a8:	75 0a                	jne    4013b4 <toNumberAndAdvance+0x3f>
		i = &aux;
  4013aa:	48 8d 45 9c          	lea    -0x64(%rbp),%rax
  4013ae:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4013b2:	eb 11                	jmp    4013c5 <toNumberAndAdvance+0x50>
	}
	else  {
		i = index;
  4013b4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4013b8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		start = *index;
  4013bc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4013c0:	8b 00                	mov    (%rax),%eax
  4013c2:	89 45 cc             	mov    %eax,-0x34(%rbp)
	}

	if (string[*i]=='-') {
  4013c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4013c9:	8b 00                	mov    (%rax),%eax
  4013cb:	48 63 d0             	movslq %eax,%rdx
  4013ce:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4013d2:	48 01 d0             	add    %rdx,%rax
  4013d5:	0f b6 00             	movzbl (%rax),%eax
  4013d8:	3c 2d                	cmp    $0x2d,%al
  4013da:	75 1c                	jne    4013f8 <toNumberAndAdvance+0x83>
		flag=1;
  4013dc:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
		start++;
  4013e3:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
		(*i)++;
  4013e7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4013eb:	8b 00                	mov    (%rax),%eax
  4013ed:	8d 50 01             	lea    0x1(%rax),%edx
  4013f0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4013f4:	89 10                	mov    %edx,(%rax)
  4013f6:	eb 35                	jmp    40142d <toNumberAndAdvance+0xb8>
	}	
	else if (!isDigit(string[*i])) {
  4013f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4013fc:	8b 00                	mov    (%rax),%eax
  4013fe:	48 63 d0             	movslq %eax,%rdx
  401401:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401405:	48 01 d0             	add    %rdx,%rax
  401408:	0f b6 00             	movzbl (%rax),%eax
  40140b:	0f be c0             	movsbl %al,%eax
  40140e:	89 c7                	mov    %eax,%edi
  401410:	e8 bc fe ff ff       	callq  4012d1 <isDigit>
  401415:	85 c0                	test   %eax,%eax
  401417:	75 14                	jne    40142d <toNumberAndAdvance+0xb8>
		print("El numero es invalido\n");
  401419:	bf c0 31 40 00       	mov    $0x4031c0,%edi
  40141e:	e8 e9 fb ff ff       	callq  40100c <print>
		return -1;
  401423:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  401428:	e9 15 01 00 00       	jmpq   401542 <toNumberAndAdvance+0x1cd>
	}

	while (isDigit(string[*i])) {
  40142d:	eb 0f                	jmp    40143e <toNumberAndAdvance+0xc9>
		(*i)++;
  40142f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401433:	8b 00                	mov    (%rax),%eax
  401435:	8d 50 01             	lea    0x1(%rax),%edx
  401438:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40143c:	89 10                	mov    %edx,(%rax)
	while (isDigit(string[*i])) {
  40143e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401442:	8b 00                	mov    (%rax),%eax
  401444:	48 63 d0             	movslq %eax,%rdx
  401447:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40144b:	48 01 d0             	add    %rdx,%rax
  40144e:	0f b6 00             	movzbl (%rax),%eax
  401451:	0f be c0             	movsbl %al,%eax
  401454:	89 c7                	mov    %eax,%edi
  401456:	e8 76 fe ff ff       	callq  4012d1 <isDigit>
  40145b:	85 c0                	test   %eax,%eax
  40145d:	75 d0                	jne    40142f <toNumberAndAdvance+0xba>
	}
	int end = (*i)-1, k=0;
  40145f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401463:	8b 00                	mov    (%rax),%eax
  401465:	83 e8 01             	sub    $0x1,%eax
  401468:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  40146b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
	char array[end-start+1];
  401472:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  401475:	2b 45 cc             	sub    -0x34(%rbp),%eax
  401478:	83 c0 01             	add    $0x1,%eax
  40147b:	48 89 e2             	mov    %rsp,%rdx
  40147e:	48 89 d3             	mov    %rdx,%rbx
  401481:	48 63 d0             	movslq %eax,%rdx
  401484:	48 83 ea 01          	sub    $0x1,%rdx
  401488:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40148c:	48 63 d0             	movslq %eax,%rdx
  40148f:	49 89 d6             	mov    %rdx,%r14
  401492:	41 bf 00 00 00 00    	mov    $0x0,%r15d
  401498:	48 63 d0             	movslq %eax,%rdx
  40149b:	49 89 d4             	mov    %rdx,%r12
  40149e:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  4014a4:	48 98                	cltq   
  4014a6:	ba 10 00 00 00       	mov    $0x10,%edx
  4014ab:	48 83 ea 01          	sub    $0x1,%rdx
  4014af:	48 01 d0             	add    %rdx,%rax
  4014b2:	be 10 00 00 00       	mov    $0x10,%esi
  4014b7:	ba 00 00 00 00       	mov    $0x0,%edx
  4014bc:	48 f7 f6             	div    %rsi
  4014bf:	48 6b c0 10          	imul   $0x10,%rax,%rax
  4014c3:	48 29 c4             	sub    %rax,%rsp
  4014c6:	48 89 e0             	mov    %rsp,%rax
  4014c9:	48 83 c0 00          	add    $0x0,%rax
  4014cd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	for (int j = start; j <= end; j++) {
  4014d1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  4014d4:	89 45 b8             	mov    %eax,-0x48(%rbp)
  4014d7:	eb 26                	jmp    4014ff <toNumberAndAdvance+0x18a>
		array[k++]=string[j];
  4014d9:	8b 45 bc             	mov    -0x44(%rbp),%eax
  4014dc:	8d 50 01             	lea    0x1(%rax),%edx
  4014df:	89 55 bc             	mov    %edx,-0x44(%rbp)
  4014e2:	8b 55 b8             	mov    -0x48(%rbp),%edx
  4014e5:	48 63 ca             	movslq %edx,%rcx
  4014e8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4014ec:	48 01 ca             	add    %rcx,%rdx
  4014ef:	0f b6 0a             	movzbl (%rdx),%ecx
  4014f2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4014f6:	48 98                	cltq   
  4014f8:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
	for (int j = start; j <= end; j++) {
  4014fb:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
  4014ff:	8b 45 b8             	mov    -0x48(%rbp),%eax
  401502:	3b 45 b4             	cmp    -0x4c(%rbp),%eax
  401505:	7e d2                	jle    4014d9 <toNumberAndAdvance+0x164>
	}
	return flag ? (-1*strToInt(array, end-start+1)) : strToInt(array, end-start+1);
  401507:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)
  40150b:	74 1b                	je     401528 <toNumberAndAdvance+0x1b3>
  40150d:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  401510:	2b 45 cc             	sub    -0x34(%rbp),%eax
  401513:	8d 50 01             	lea    0x1(%rax),%edx
  401516:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40151a:	89 d6                	mov    %edx,%esi
  40151c:	48 89 c7             	mov    %rax,%rdi
  40151f:	e8 f9 fc ff ff       	callq  40121d <strToInt>
  401524:	f7 d8                	neg    %eax
  401526:	eb 17                	jmp    40153f <toNumberAndAdvance+0x1ca>
  401528:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  40152b:	2b 45 cc             	sub    -0x34(%rbp),%eax
  40152e:	8d 50 01             	lea    0x1(%rax),%edx
  401531:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401535:	89 d6                	mov    %edx,%esi
  401537:	48 89 c7             	mov    %rax,%rdi
  40153a:	e8 de fc ff ff       	callq  40121d <strToInt>
  40153f:	48 89 dc             	mov    %rbx,%rsp
}
  401542:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  401546:	5b                   	pop    %rbx
  401547:	41 5c                	pop    %r12
  401549:	41 5d                	pop    %r13
  40154b:	41 5e                	pop    %r14
  40154d:	41 5f                	pop    %r15
  40154f:	5d                   	pop    %rbp
  401550:	c3                   	retq   

0000000000401551 <strcmp>:



int strcmp(char *X, char *Y)
{
  401551:	55                   	push   %rbp
  401552:	48 89 e5             	mov    %rsp,%rbp
  401555:	48 83 ec 10          	sub    $0x10,%rsp
  401559:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40155d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    while (*X)
  401561:	eb 1e                	jmp    401581 <strcmp+0x30>
    {
        // if characters differ, or end of the second string is reached
        if (*X != *Y) {
  401563:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401567:	0f b6 10             	movzbl (%rax),%edx
  40156a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40156e:	0f b6 00             	movzbl (%rax),%eax
  401571:	38 c2                	cmp    %al,%dl
  401573:	74 02                	je     401577 <strcmp+0x26>
            break;
  401575:	eb 15                	jmp    40158c <strcmp+0x3b>
        }
 
        // move to the next pair of characters
        X++;
  401577:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
        Y++;
  40157c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    while (*X)
  401581:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401585:	0f b6 00             	movzbl (%rax),%eax
  401588:	84 c0                	test   %al,%al
  40158a:	75 d7                	jne    401563 <strcmp+0x12>
    }
 
    // return the ASCII difference after converting `char*` to `unsigned char*`
    return *(const unsigned char*)X - *(const unsigned char*)Y;
  40158c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401590:	0f b6 00             	movzbl (%rax),%eax
  401593:	0f b6 d0             	movzbl %al,%edx
  401596:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40159a:	0f b6 00             	movzbl (%rax),%eax
  40159d:	0f b6 c0             	movzbl %al,%eax
  4015a0:	29 c2                	sub    %eax,%edx
  4015a2:	89 d0                	mov    %edx,%eax
}
  4015a4:	c9                   	leaveq 
  4015a5:	c3                   	retq   

00000000004015a6 <strcpy>:


char* strcpy(char* destination, const char* source)
{
  4015a6:	55                   	push   %rbp
  4015a7:	48 89 e5             	mov    %rsp,%rbp
  4015aa:	48 83 ec 20          	sub    $0x20,%rsp
  4015ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4015b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    // return if no memory is allocated to the destination
    if (destination == NULL) {
  4015b6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4015bb:	75 07                	jne    4015c4 <strcpy+0x1e>
        return NULL;
  4015bd:	b8 00 00 00 00       	mov    $0x0,%eax
  4015c2:	eb 37                	jmp    4015fb <strcpy+0x55>
    }
 
    char *ptr = destination;
  4015c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4015c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 
    while (*source != '\0')
  4015cc:	eb 17                	jmp    4015e5 <strcpy+0x3f>
    {
        *destination = *source;
  4015ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4015d2:	0f b6 10             	movzbl (%rax),%edx
  4015d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4015d9:	88 10                	mov    %dl,(%rax)
        destination++;
  4015db:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
        source++;
  4015e0:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    while (*source != '\0')
  4015e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4015e9:	0f b6 00             	movzbl (%rax),%eax
  4015ec:	84 c0                	test   %al,%al
  4015ee:	75 de                	jne    4015ce <strcpy+0x28>
    }
 
    *destination = '\0';
  4015f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4015f4:	c6 00 00             	movb   $0x0,(%rax)
 
    return ptr;
  4015f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4015fb:	c9                   	leaveq 
  4015fc:	c3                   	retq   

00000000004015fd <getChar>:




int getChar() {
  4015fd:	55                   	push   %rbp
  4015fe:	48 89 e5             	mov    %rsp,%rbp
    return get_char(1);
  401601:	bf 01 00 00 00       	mov    $0x1,%edi
  401606:	e8 99 eb ff ff       	callq  4001a4 <get_char>
}
  40160b:	5d                   	pop    %rbp
  40160c:	c3                   	retq   

000000000040160d <getRealChar>:

int getRealChar() {
  40160d:	55                   	push   %rbp
  40160e:	48 89 e5             	mov    %rsp,%rbp
    return get_char(0);
  401611:	bf 00 00 00 00       	mov    $0x0,%edi
  401616:	e8 89 eb ff ff       	callq  4001a4 <get_char>
}
  40161b:	5d                   	pop    %rbp
  40161c:	c3                   	retq   

000000000040161d <putCharColor>:

int putCharColor(char c, char color) {
  40161d:	55                   	push   %rbp
  40161e:	48 89 e5             	mov    %rsp,%rbp
  401621:	48 83 ec 10          	sub    $0x10,%rsp
  401625:	89 fa                	mov    %edi,%edx
  401627:	89 f0                	mov    %esi,%eax
  401629:	88 55 fc             	mov    %dl,-0x4(%rbp)
  40162c:	88 45 f8             	mov    %al,-0x8(%rbp)
	if (!c)
  40162f:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  401633:	84 c0                	test   %al,%al
  401635:	75 07                	jne    40163e <putCharColor+0x21>
		return 0;
  401637:	b8 00 00 00 00       	mov    $0x0,%eax
  40163c:	eb 1c                	jmp    40165a <putCharColor+0x3d>
    return system_write(STDOUT,&c,1,color);
  40163e:	0f be 55 f8          	movsbl -0x8(%rbp),%edx
  401642:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  401646:	89 d1                	mov    %edx,%ecx
  401648:	ba 01 00 00 00       	mov    $0x1,%edx
  40164d:	48 89 c6             	mov    %rax,%rsi
  401650:	bf 01 00 00 00       	mov    $0x1,%edi
  401655:	e8 46 ea ff ff       	callq  4000a0 <system_write>
}
  40165a:	c9                   	leaveq 
  40165b:	c3                   	retq   

000000000040165c <putChar>:

int putChar(char c) {
  40165c:	55                   	push   %rbp
  40165d:	48 89 e5             	mov    %rsp,%rbp
  401660:	48 83 ec 10          	sub    $0x10,%rsp
  401664:	89 f8                	mov    %edi,%eax
  401666:	88 45 fc             	mov    %al,-0x4(%rbp)
	return putCharColor(c, GREY);
  401669:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  40166d:	be 07 00 00 00       	mov    $0x7,%esi
  401672:	89 c7                	mov    %eax,%edi
  401674:	e8 a4 ff ff ff       	callq  40161d <putCharColor>
}
  401679:	c9                   	leaveq 
  40167a:	c3                   	retq   

000000000040167b <intToChar>:

char intToChar(unsigned int num) {
  40167b:	55                   	push   %rbp
  40167c:	48 89 e5             	mov    %rsp,%rbp
  40167f:	48 83 ec 08          	sub    $0x8,%rsp
  401683:	89 7d fc             	mov    %edi,-0x4(%rbp)
	if (num > 9)
  401686:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
  40168a:	76 07                	jbe    401693 <intToChar+0x18>
		return -1;
  40168c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  401691:	eb 06                	jmp    401699 <intToChar+0x1e>
	return '0' + num;
  401693:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401696:	83 c0 30             	add    $0x30,%eax
}
  401699:	c9                   	leaveq 
  40169a:	c3                   	retq   

000000000040169b <split>:

int split(char * buf,char c, char * target[]) {
  40169b:	55                   	push   %rbp
  40169c:	48 89 e5             	mov    %rsp,%rbp
  40169f:	48 83 ec 28          	sub    $0x28,%rsp
  4016a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4016a7:	89 f0                	mov    %esi,%eax
  4016a9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4016ad:	88 45 e4             	mov    %al,-0x1c(%rbp)
	int j=0;
  4016b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	for (int i=0 ; buf[i] ; i++) {
  4016b7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  4016be:	eb 55                	jmp    401715 <split+0x7a>
		if (buf[i]==c) {
  4016c0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4016c3:	48 63 d0             	movslq %eax,%rdx
  4016c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4016ca:	48 01 d0             	add    %rdx,%rax
  4016cd:	0f b6 00             	movzbl (%rax),%eax
  4016d0:	3a 45 e4             	cmp    -0x1c(%rbp),%al
  4016d3:	75 12                	jne    4016e7 <split+0x4c>
			buf[i] = 0;
  4016d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4016d8:	48 63 d0             	movslq %eax,%rdx
  4016db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4016df:	48 01 d0             	add    %rdx,%rax
  4016e2:	c6 00 00             	movb   $0x0,(%rax)
  4016e5:	eb 2a                	jmp    401711 <split+0x76>
		}
		else {
			target[j++] = &buf[i];
  4016e7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4016ea:	8d 50 01             	lea    0x1(%rax),%edx
  4016ed:	89 55 fc             	mov    %edx,-0x4(%rbp)
  4016f0:	48 98                	cltq   
  4016f2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4016f9:	00 
  4016fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4016fe:	48 01 d0             	add    %rdx,%rax
  401701:	8b 55 f8             	mov    -0x8(%rbp),%edx
  401704:	48 63 ca             	movslq %edx,%rcx
  401707:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40170b:	48 01 ca             	add    %rcx,%rdx
  40170e:	48 89 10             	mov    %rdx,(%rax)
	for (int i=0 ; buf[i] ; i++) {
  401711:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  401715:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401718:	48 63 d0             	movslq %eax,%rdx
  40171b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40171f:	48 01 d0             	add    %rdx,%rax
  401722:	0f b6 00             	movzbl (%rax),%eax
  401725:	84 c0                	test   %al,%al
  401727:	75 97                	jne    4016c0 <split+0x25>
		}
	}
	return j;
  401729:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  40172c:	c9                   	leaveq 
  40172d:	c3                   	retq   

000000000040172e <secondsElapsed>:

long secondsElapsed() {
  40172e:	55                   	push   %rbp
  40172f:	48 89 e5             	mov    %rsp,%rbp
	return timer_tick(0)/18;
  401732:	bf 00 00 00 00       	mov    $0x0,%edi
  401737:	e8 04 eb ff ff       	callq  400240 <timer_tick>
  40173c:	48 89 c1             	mov    %rax,%rcx
  40173f:	48 ba 39 8e e3 38 8e 	movabs $0xe38e38e38e38e39,%rdx
  401746:	e3 38 0e 
  401749:	48 89 c8             	mov    %rcx,%rax
  40174c:	48 f7 ea             	imul   %rdx
  40174f:	48 89 c8             	mov    %rcx,%rax
  401752:	48 c1 f8 3f          	sar    $0x3f,%rax
  401756:	48 29 c2             	sub    %rax,%rdx
  401759:	48 89 d0             	mov    %rdx,%rax
}
  40175c:	5d                   	pop    %rbp
  40175d:	c3                   	retq   

000000000040175e <ticks>:

int ticks() {
  40175e:	55                   	push   %rbp
  40175f:	48 89 e5             	mov    %rsp,%rbp
	return timer_tick(0);
  401762:	bf 00 00 00 00       	mov    $0x0,%edi
  401767:	e8 d4 ea ff ff       	callq  400240 <timer_tick>
}
  40176c:	5d                   	pop    %rbp
  40176d:	c3                   	retq   

000000000040176e <printShell>:
static t_shellc shellCommands[10] = {{0,0,0}};




void printShell(char * buffer, char shellBuffer[SHELLH][SHELLW]) {
  40176e:	55                   	push   %rbp
  40176f:	48 89 e5             	mov    %rsp,%rbp
  401772:	48 83 ec 20          	sub    $0x20,%rsp
  401776:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40177a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    for (int i = 0 ; i < SHELLH ; i++) {
  40177e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  401785:	eb 74                	jmp    4017fb <printShell+0x8d>
        if (shellBuffer[i][0] == 0)
  401787:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40178a:	48 63 d0             	movslq %eax,%rdx
  40178d:	48 89 d0             	mov    %rdx,%rax
  401790:	48 c1 e0 02          	shl    $0x2,%rax
  401794:	48 01 d0             	add    %rdx,%rax
  401797:	48 c1 e0 04          	shl    $0x4,%rax
  40179b:	48 89 c2             	mov    %rax,%rdx
  40179e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4017a2:	48 01 d0             	add    %rdx,%rax
  4017a5:	0f b6 00             	movzbl (%rax),%eax
  4017a8:	84 c0                	test   %al,%al
  4017aa:	75 0c                	jne    4017b8 <printShell+0x4a>
            putChar('\n');
  4017ac:	bf 0a 00 00 00       	mov    $0xa,%edi
  4017b1:	e8 a6 fe ff ff       	callq  40165c <putChar>
  4017b6:	eb 3f                	jmp    4017f7 <printShell+0x89>
        else {
            printColor(SHELL_MSG,SHELL_COLOR);
  4017b8:	be 02 00 00 00       	mov    $0x2,%esi
  4017bd:	bf e8 31 40 00       	mov    $0x4031e8,%edi
  4017c2:	e8 00 f8 ff ff       	callq  400fc7 <printColor>
            print(shellBuffer[i]);
  4017c7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4017ca:	48 63 d0             	movslq %eax,%rdx
  4017cd:	48 89 d0             	mov    %rdx,%rax
  4017d0:	48 c1 e0 02          	shl    $0x2,%rax
  4017d4:	48 01 d0             	add    %rdx,%rax
  4017d7:	48 c1 e0 04          	shl    $0x4,%rax
  4017db:	48 89 c2             	mov    %rax,%rdx
  4017de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4017e2:	48 01 d0             	add    %rdx,%rax
  4017e5:	48 89 c7             	mov    %rax,%rdi
  4017e8:	e8 1f f8 ff ff       	callq  40100c <print>
            putChar('\n');
  4017ed:	bf 0a 00 00 00       	mov    $0xa,%edi
  4017f2:	e8 65 fe ff ff       	callq  40165c <putChar>
    for (int i = 0 ; i < SHELLH ; i++) {
  4017f7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4017fb:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
  4017ff:	7e 86                	jle    401787 <printShell+0x19>
        }  
    }
    print(consoleMsg);
  401801:	48 8b 05 c0 2b 00 00 	mov    0x2bc0(%rip),%rax        # 4043c8 <consoleMsg>
  401808:	48 89 c7             	mov    %rax,%rdi
  40180b:	e8 fc f7 ff ff       	callq  40100c <print>
    //consoleMsg[0]=0;
    putChar('\n');
  401810:	bf 0a 00 00 00       	mov    $0xa,%edi
  401815:	e8 42 fe ff ff       	callq  40165c <putChar>

    printColor(SHELL_MSG,SHELL_COLOR);
  40181a:	be 02 00 00 00       	mov    $0x2,%esi
  40181f:	bf e8 31 40 00       	mov    $0x4031e8,%edi
  401824:	e8 9e f7 ff ff       	callq  400fc7 <printColor>
    print(buffer);
  401829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40182d:	48 89 c7             	mov    %rax,%rdi
  401830:	e8 d7 f7 ff ff       	callq  40100c <print>
    
}
  401835:	c9                   	leaveq 
  401836:	c3                   	retq   

0000000000401837 <updateConsoleMsg>:

void updateConsoleMsg(char * s) {
  401837:	55                   	push   %rbp
  401838:	48 89 e5             	mov    %rsp,%rbp
  40183b:	48 83 ec 10          	sub    $0x10,%rsp
  40183f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    strcpy(consoleMsg,s);
  401843:	48 8b 05 7e 2b 00 00 	mov    0x2b7e(%rip),%rax        # 4043c8 <consoleMsg>
  40184a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40184e:	48 89 d6             	mov    %rdx,%rsi
  401851:	48 89 c7             	mov    %rax,%rdi
  401854:	e8 4d fd ff ff       	callq  4015a6 <strcpy>
}
  401859:	c9                   	leaveq 
  40185a:	c3                   	retq   

000000000040185b <printHola>:



void printHola() {
  40185b:	55                   	push   %rbp
  40185c:	48 89 e5             	mov    %rsp,%rbp
    updateConsoleMsg("Hola");
  40185f:	bf f2 31 40 00       	mov    $0x4031f2,%edi
  401864:	e8 ce ff ff ff       	callq  401837 <updateConsoleMsg>
}
  401869:	5d                   	pop    %rbp
  40186a:	c3                   	retq   

000000000040186b <printDateTime>:

void printDateTime() {
  40186b:	55                   	push   %rbp
  40186c:	48 89 e5             	mov    %rsp,%rbp
  40186f:	48 83 ec 20          	sub    $0x20,%rsp
    char buf[20] = {0};
  401873:	48 c7 45 ec 00 00 00 	movq   $0x0,-0x14(%rbp)
  40187a:	00 
  40187b:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  401882:	00 
  401883:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    get_date(buf);
  40188a:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  40188e:	48 89 c7             	mov    %rax,%rdi
  401891:	e8 12 ea ff ff       	callq  4002a8 <get_date>
    buf[8] = buf[10] = ' ';
  401896:	c6 45 f6 20          	movb   $0x20,-0xa(%rbp)
  40189a:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  40189e:	88 45 f4             	mov    %al,-0xc(%rbp)
    buf[9] = '-';
  4018a1:	c6 45 f5 2d          	movb   $0x2d,-0xb(%rbp)
    get_time(&buf[11]);
  4018a5:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  4018a9:	48 83 c0 0b          	add    $0xb,%rax
  4018ad:	48 89 c7             	mov    %rax,%rdi
  4018b0:	e8 57 e9 ff ff       	callq  40020c <get_time>
    updateConsoleMsg(buf);
  4018b5:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  4018b9:	48 89 c7             	mov    %rax,%rdi
  4018bc:	e8 76 ff ff ff       	callq  401837 <updateConsoleMsg>
}
  4018c1:	c9                   	leaveq 
  4018c2:	c3                   	retq   

00000000004018c3 <help>:

void help() {
  4018c3:	55                   	push   %rbp
  4018c4:	48 89 e5             	mov    %rsp,%rbp
    
}
  4018c7:	5d                   	pop    %rbp
  4018c8:	c3                   	retq   

00000000004018c9 <setupShellCommands>:


void setupShellCommands() {
  4018c9:	55                   	push   %rbp
  4018ca:	48 89 e5             	mov    %rsp,%rbp
    loadCommand(&printHola,"HolaP", "Printea Hola");
  4018cd:	ba f7 31 40 00       	mov    $0x4031f7,%edx
  4018d2:	be 04 32 40 00       	mov    $0x403204,%esi
  4018d7:	bf 5b 18 40 00       	mov    $0x40185b,%edi
  4018dc:	e8 3e 00 00 00       	callq  40191f <loadCommand>
    loadCommand(&multipleWindows,"multiple", "starts multiple window environment");
  4018e1:	ba 10 32 40 00       	mov    $0x403210,%edx
  4018e6:	be 33 32 40 00       	mov    $0x403233,%esi
  4018eb:	bf 3e 1e 40 00       	mov    $0x401e3e,%edi
  4018f0:	e8 2a 00 00 00       	callq  40191f <loadCommand>
    loadCommand(&printDateTime,"datetime", "displays the date and time");
  4018f5:	ba 3c 32 40 00       	mov    $0x40323c,%edx
  4018fa:	be 57 32 40 00       	mov    $0x403257,%esi
  4018ff:	bf 6b 18 40 00       	mov    $0x40186b,%edi
  401904:	e8 16 00 00 00       	callq  40191f <loadCommand>
    loadCommand(&help,"datetime", "displays the date and time");
  401909:	ba 3c 32 40 00       	mov    $0x40323c,%edx
  40190e:	be 57 32 40 00       	mov    $0x403257,%esi
  401913:	bf c3 18 40 00       	mov    $0x4018c3,%edi
  401918:	e8 02 00 00 00       	callq  40191f <loadCommand>
}
  40191d:	5d                   	pop    %rbp
  40191e:	c3                   	retq   

000000000040191f <loadCommand>:

void loadCommand(void (*f)(), char *name, char *desc)
{
  40191f:	55                   	push   %rbp
  401920:	48 89 e5             	mov    %rsp,%rbp
  401923:	48 83 ec 18          	sub    $0x18,%rsp
  401927:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40192b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40192f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    shellCommands[cmdCounter].shellf = f;
  401933:	8b 05 d7 38 00 00    	mov    0x38d7(%rip),%eax        # 405210 <cmdCounter>
  401939:	48 63 d0             	movslq %eax,%rdx
  40193c:	48 89 d0             	mov    %rdx,%rax
  40193f:	48 01 c0             	add    %rax,%rax
  401942:	48 01 d0             	add    %rdx,%rax
  401945:	48 c1 e0 03          	shl    $0x3,%rax
  401949:	48 8d 90 c0 58 40 00 	lea    0x4058c0(%rax),%rdx
  401950:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401954:	48 89 02             	mov    %rax,(%rdx)
    shellCommands[cmdCounter].name = name;
  401957:	8b 05 b3 38 00 00    	mov    0x38b3(%rip),%eax        # 405210 <cmdCounter>
  40195d:	48 63 d0             	movslq %eax,%rdx
  401960:	48 89 d0             	mov    %rdx,%rax
  401963:	48 01 c0             	add    %rax,%rax
  401966:	48 01 d0             	add    %rdx,%rax
  401969:	48 c1 e0 03          	shl    $0x3,%rax
  40196d:	48 8d 90 c0 58 40 00 	lea    0x4058c0(%rax),%rdx
  401974:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401978:	48 89 42 08          	mov    %rax,0x8(%rdx)
    shellCommands[cmdCounter].description = desc;
  40197c:	8b 05 8e 38 00 00    	mov    0x388e(%rip),%eax        # 405210 <cmdCounter>
  401982:	48 63 d0             	movslq %eax,%rdx
  401985:	48 89 d0             	mov    %rdx,%rax
  401988:	48 01 c0             	add    %rax,%rax
  40198b:	48 01 d0             	add    %rdx,%rax
  40198e:	48 c1 e0 03          	shl    $0x3,%rax
  401992:	48 83 c0 10          	add    $0x10,%rax
  401996:	48 8d 90 c0 58 40 00 	lea    0x4058c0(%rax),%rdx
  40199d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4019a1:	48 89 02             	mov    %rax,(%rdx)
    // shellCommands[cmdCounter].builtIn = builtIn;
    cmdCounter++;
  4019a4:	8b 05 66 38 00 00    	mov    0x3866(%rip),%eax        # 405210 <cmdCounter>
  4019aa:	83 c0 01             	add    $0x1,%eax
  4019ad:	89 05 5d 38 00 00    	mov    %eax,0x385d(%rip)        # 405210 <cmdCounter>
}
  4019b3:	c9                   	leaveq 
  4019b4:	c3                   	retq   

00000000004019b5 <processCommands>:

void processCommands(char * buf, char shellBuffer[SHELLH][SHELLW], int lines) {
  4019b5:	55                   	push   %rbp
  4019b6:	48 89 e5             	mov    %rsp,%rbp
  4019b9:	48 83 ec 30          	sub    $0x30,%rsp
  4019bd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4019c1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4019c5:	89 55 dc             	mov    %edx,-0x24(%rbp)
    for (int i=1 ; i<SHELLH ; i++) {
  4019c8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  4019cf:	eb 4d                	jmp    401a1e <processCommands+0x69>
        strcpy(shellBuffer[i-1], shellBuffer[i]);
  4019d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4019d4:	48 63 d0             	movslq %eax,%rdx
  4019d7:	48 89 d0             	mov    %rdx,%rax
  4019da:	48 c1 e0 02          	shl    $0x2,%rax
  4019de:	48 01 d0             	add    %rdx,%rax
  4019e1:	48 c1 e0 04          	shl    $0x4,%rax
  4019e5:	48 89 c2             	mov    %rax,%rdx
  4019e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4019ec:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4019f0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4019f3:	48 63 d0             	movslq %eax,%rdx
  4019f6:	48 89 d0             	mov    %rdx,%rax
  4019f9:	48 c1 e0 02          	shl    $0x2,%rax
  4019fd:	48 01 d0             	add    %rdx,%rax
  401a00:	48 c1 e0 04          	shl    $0x4,%rax
  401a04:	48 8d 50 b0          	lea    -0x50(%rax),%rdx
  401a08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401a0c:	48 01 d0             	add    %rdx,%rax
  401a0f:	48 89 ce             	mov    %rcx,%rsi
  401a12:	48 89 c7             	mov    %rax,%rdi
  401a15:	e8 8c fb ff ff       	callq  4015a6 <strcpy>
    for (int i=1 ; i<SHELLH ; i++) {
  401a1a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  401a1e:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
  401a22:	7e ad                	jle    4019d1 <processCommands+0x1c>
    }

    strcpy(shellBuffer[SHELLH-1], buf);
  401a24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401a28:	48 8d 90 d0 02 00 00 	lea    0x2d0(%rax),%rdx
  401a2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a33:	48 89 c6             	mov    %rax,%rsi
  401a36:	48 89 d7             	mov    %rdx,%rdi
  401a39:	e8 68 fb ff ff       	callq  4015a6 <strcpy>

    int idx = cmdIndex(buf);
  401a3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a42:	48 89 c7             	mov    %rax,%rdi
  401a45:	e8 94 03 00 00       	callq  401dde <cmdIndex>
  401a4a:	89 45 f8             	mov    %eax,-0x8(%rbp)
    buf[0]=0;
  401a4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a51:	c6 00 00             	movb   $0x0,(%rax)
    if (idx < 0) {
  401a54:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  401a58:	79 0c                	jns    401a66 <processCommands+0xb1>
        updateConsoleMsg("Comando invalido");
  401a5a:	bf 60 32 40 00       	mov    $0x403260,%edi
  401a5f:	e8 d3 fd ff ff       	callq  401837 <updateConsoleMsg>
        return;
  401a64:	eb 28                	jmp    401a8e <processCommands+0xd9>
    }
    shellCommands[idx].shellf(0,0);
  401a66:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401a69:	48 63 d0             	movslq %eax,%rdx
  401a6c:	48 89 d0             	mov    %rdx,%rax
  401a6f:	48 01 c0             	add    %rax,%rax
  401a72:	48 01 d0             	add    %rdx,%rax
  401a75:	48 c1 e0 03          	shl    $0x3,%rax
  401a79:	48 05 c0 58 40 00    	add    $0x4058c0,%rax
  401a7f:	48 8b 00             	mov    (%rax),%rax
  401a82:	be 00 00 00 00       	mov    $0x0,%esi
  401a87:	bf 00 00 00 00       	mov    $0x0,%edi
  401a8c:	ff d0                	callq  *%rax
}
  401a8e:	c9                   	leaveq 
  401a8f:	c3                   	retq   

0000000000401a90 <cleanBuffers>:

void cleanBuffers() {
  401a90:	55                   	push   %rbp
  401a91:	48 89 e5             	mov    %rsp,%rbp
  401a94:	48 83 ec 10          	sub    $0x10,%rsp
    for (int i=0 ; i<SHELLH ; i++)
  401a98:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  401a9f:	eb 21                	jmp    401ac2 <cleanBuffers+0x32>
        shellBuffer1[i][0] = 0;
  401aa1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401aa4:	48 63 d0             	movslq %eax,%rdx
  401aa7:	48 89 d0             	mov    %rdx,%rax
  401aaa:	48 c1 e0 02          	shl    $0x2,%rax
  401aae:	48 01 d0             	add    %rdx,%rax
  401ab1:	48 c1 e0 04          	shl    $0x4,%rax
  401ab5:	48 05 40 52 40 00    	add    $0x405240,%rax
  401abb:	c6 00 00             	movb   $0x0,(%rax)
    for (int i=0 ; i<SHELLH ; i++)
  401abe:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  401ac2:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
  401ac6:	7e d9                	jle    401aa1 <cleanBuffers+0x11>
    for (int i=0 ; i<SHELLH ; i++)
  401ac8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  401acf:	eb 21                	jmp    401af2 <cleanBuffers+0x62>
        shellBuffer2[i][0] = 0;
  401ad1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401ad4:	48 63 d0             	movslq %eax,%rdx
  401ad7:	48 89 d0             	mov    %rdx,%rax
  401ada:	48 c1 e0 02          	shl    $0x2,%rax
  401ade:	48 01 d0             	add    %rdx,%rax
  401ae1:	48 c1 e0 04          	shl    $0x4,%rax
  401ae5:	48 05 80 55 40 00    	add    $0x405580,%rax
  401aeb:	c6 00 00             	movb   $0x0,(%rax)
    for (int i=0 ; i<SHELLH ; i++)
  401aee:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  401af2:	83 7d f8 09          	cmpl   $0x9,-0x8(%rbp)
  401af6:	7e d9                	jle    401ad1 <cleanBuffers+0x41>
    consoleMsg1[0] = consoleMsg2[0] = 0;
  401af8:	c6 05 c1 36 00 00 00 	movb   $0x0,0x36c1(%rip)        # 4051c0 <consoleMsg2>
  401aff:	0f b6 05 ba 36 00 00 	movzbl 0x36ba(%rip),%eax        # 4051c0 <consoleMsg2>
  401b06:	88 05 34 36 00 00    	mov    %al,0x3634(%rip)        # 405140 <consoleMsg1>
}
  401b0c:	c9                   	leaveq 
  401b0d:	c3                   	retq   

0000000000401b0e <manageConsole>:

void manageConsole(char bufferIn[SHELLH][SHELLW], char * buf, int* bufSize, char * consoleMsgC, int bufferLines) {
  401b0e:	55                   	push   %rbp
  401b0f:	48 89 e5             	mov    %rsp,%rbp
  401b12:	48 83 ec 30          	sub    $0x30,%rsp
  401b16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401b1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401b1e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  401b22:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  401b26:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
        consoleMsg = consoleMsgC;
  401b2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401b2e:	48 89 05 93 28 00 00 	mov    %rax,0x2893(%rip)        # 4043c8 <consoleMsg>
        console_clear();
  401b35:	b8 00 00 00 00       	mov    $0x0,%eax
  401b3a:	e8 c9 e5 ff ff       	callq  400108 <console_clear>
        printShell(buf, bufferIn);
  401b3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401b43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b47:	48 89 d6             	mov    %rdx,%rsi
  401b4a:	48 89 c7             	mov    %rax,%rdi
  401b4d:	e8 1c fc ff ff       	callq  40176e <printShell>
        if(readInput(buf, bufSize, SHELL_MSG,GREEN,30)) {
  401b52:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  401b56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b5a:	41 b8 1e 00 00 00    	mov    $0x1e,%r8d
  401b60:	b9 02 00 00 00       	mov    $0x2,%ecx
  401b65:	ba e8 31 40 00       	mov    $0x4031e8,%edx
  401b6a:	48 89 c7             	mov    %rax,%rdi
  401b6d:	e8 d7 00 00 00       	callq  401c49 <readInput>
  401b72:	85 c0                	test   %eax,%eax
  401b74:	74 02                	je     401b78 <manageConsole+0x6a>
            return;
  401b76:	eb 20                	jmp    401b98 <manageConsole+0x8a>
        }
        flag = 1;
  401b78:	c7 05 4e 28 00 00 01 	movl   $0x1,0x284e(%rip)        # 4043d0 <flag>
  401b7f:	00 00 00 
        processCommands(buf, bufferIn, bufferLines);
  401b82:	8b 55 dc             	mov    -0x24(%rbp),%edx
  401b85:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401b89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b8d:	48 89 ce             	mov    %rcx,%rsi
  401b90:	48 89 c7             	mov    %rax,%rdi
  401b93:	e8 1d fe ff ff       	callq  4019b5 <processCommands>
        // console_clear();
        // printShell(bufferIn);
}
  401b98:	c9                   	leaveq 
  401b99:	c3                   	retq   

0000000000401b9a <theShell>:

int theShell() {
  401b9a:	55                   	push   %rbp
  401b9b:	48 89 e5             	mov    %rsp,%rbp
  401b9e:	48 83 ec 10          	sub    $0x10,%rsp
    cleanBuffers();
  401ba2:	b8 00 00 00 00       	mov    $0x0,%eax
  401ba7:	e8 e4 fe ff ff       	callq  401a90 <cleanBuffers>
    setupShellCommands();
  401bac:	b8 00 00 00 00       	mov    $0x0,%eax
  401bb1:	e8 13 fd ff ff       	callq  4018c9 <setupShellCommands>
    set_kb_target(&kb);
  401bb6:	bf a8 58 40 00       	mov    $0x4058a8,%edi
  401bbb:	e8 b4 e6 ff ff       	callq  400274 <set_kb_target>
    console_clear();
  401bc0:	b8 00 00 00 00       	mov    $0x0,%eax
  401bc5:	e8 3e e5 ff ff       	callq  400108 <console_clear>
    split_screen(2,0);
  401bca:	be 00 00 00 00       	mov    $0x0,%esi
  401bcf:	bf 02 00 00 00       	mov    $0x2,%edi
  401bd4:	e8 63 e5 ff ff       	callq  40013c <split_screen>
    // print(levels[0]);
    // while(1);
    while(1) {
        int previous = currentShell;
  401bd9:	8b 05 e9 34 00 00    	mov    0x34e9(%rip),%eax        # 4050c8 <currentShell>
  401bdf:	89 45 fc             	mov    %eax,-0x4(%rbp)
        set_screen(currentShell);
  401be2:	8b 05 e0 34 00 00    	mov    0x34e0(%rip),%eax        # 4050c8 <currentShell>
  401be8:	89 c7                	mov    %eax,%edi
  401bea:	e8 81 e5 ff ff       	callq  400170 <set_screen>
        switch(currentShell) {
  401bef:	8b 05 d3 34 00 00    	mov    0x34d3(%rip),%eax        # 4050c8 <currentShell>
  401bf5:	85 c0                	test   %eax,%eax
  401bf7:	74 07                	je     401c00 <theShell+0x66>
  401bf9:	83 f8 01             	cmp    $0x1,%eax
  401bfc:	74 26                	je     401c24 <theShell+0x8a>
  401bfe:	eb 47                	jmp    401c47 <theShell+0xad>
            case 0:
                manageConsole(shellBuffer1, buffer1, &buf1Size, consoleMsg1, buffer1Lines);
  401c00:	8b 05 9a 3c 00 00    	mov    0x3c9a(%rip),%eax        # 4058a0 <buffer1Lines>
  401c06:	41 89 c0             	mov    %eax,%r8d
  401c09:	b9 40 51 40 00       	mov    $0x405140,%ecx
  401c0e:	ba c0 50 40 00       	mov    $0x4050c0,%edx
  401c13:	be e0 50 40 00       	mov    $0x4050e0,%esi
  401c18:	bf 40 52 40 00       	mov    $0x405240,%edi
  401c1d:	e8 ec fe ff ff       	callq  401b0e <manageConsole>
                break;
  401c22:	eb 23                	jmp    401c47 <theShell+0xad>
            case 1:
                manageConsole(shellBuffer2, buffer2, &buf2Size, consoleMsg2, buffer2Lines);
  401c24:	8b 05 7a 3c 00 00    	mov    0x3c7a(%rip),%eax        # 4058a4 <buffer2Lines>
  401c2a:	41 89 c0             	mov    %eax,%r8d
  401c2d:	b9 c0 51 40 00       	mov    $0x4051c0,%ecx
  401c32:	ba c4 50 40 00       	mov    $0x4050c4,%edx
  401c37:	be 00 51 40 00       	mov    $0x405100,%esi
  401c3c:	bf 80 55 40 00       	mov    $0x405580,%edi
  401c41:	e8 c8 fe ff ff       	callq  401b0e <manageConsole>
                break;
  401c46:	90                   	nop
        }
    }
  401c47:	eb 90                	jmp    401bd9 <theShell+0x3f>

0000000000401c49 <readInput>:
}

int readInput(char *buffer, int* size, char * def, char color, int maxSize)
{
  401c49:	55                   	push   %rbp
  401c4a:	48 89 e5             	mov    %rsp,%rbp
  401c4d:	48 83 ec 30          	sub    $0x30,%rsp
  401c51:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401c55:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  401c59:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  401c5d:	89 c8                	mov    %ecx,%eax
  401c5f:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  401c63:	88 45 d4             	mov    %al,-0x2c(%rbp)
    int begin=1, c;
  401c66:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
    
    while ((*size) < (maxSize - 1) && ((c = getRealChar()) != '\n')  && (c != UP_ARROW) && (c != DOWN_ARROW))
  401c6d:	e9 c2 00 00 00       	jmpq   401d34 <readInput+0xeb>
    { 
        if (begin) {
  401c72:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401c76:	74 2f                	je     401ca7 <readInput+0x5e>
            clear_line();
  401c78:	b8 00 00 00 00       	mov    $0x0,%eax
  401c7d:	e8 56 e5 ff ff       	callq  4001d8 <clear_line>
            printColor(def, color);
  401c82:	0f be 55 d4          	movsbl -0x2c(%rbp),%edx
  401c86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401c8a:	89 d6                	mov    %edx,%esi
  401c8c:	48 89 c7             	mov    %rax,%rdi
  401c8f:	e8 33 f3 ff ff       	callq  400fc7 <printColor>
            print(buffer);
  401c94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c98:	48 89 c7             	mov    %rax,%rdi
  401c9b:	e8 6c f3 ff ff       	callq  40100c <print>
            begin=0;
  401ca0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        }

            if (c != '\b' && PRINTABLE(c))
  401ca7:	83 7d f8 08          	cmpl   $0x8,-0x8(%rbp)
  401cab:	74 57                	je     401d04 <readInput+0xbb>
  401cad:	83 7d f8 3a          	cmpl   $0x3a,-0x8(%rbp)
  401cb1:	74 51                	je     401d04 <readInput+0xbb>
  401cb3:	81 7d f8 f5 01 00 00 	cmpl   $0x1f5,-0x8(%rbp)
  401cba:	74 48                	je     401d04 <readInput+0xbb>
  401cbc:	81 7d f8 f6 01 00 00 	cmpl   $0x1f6,-0x8(%rbp)
  401cc3:	74 3f                	je     401d04 <readInput+0xbb>
  401cc5:	81 7d f8 f7 01 00 00 	cmpl   $0x1f7,-0x8(%rbp)
  401ccc:	74 36                	je     401d04 <readInput+0xbb>
  401cce:	81 7d f8 f8 01 00 00 	cmpl   $0x1f8,-0x8(%rbp)
  401cd5:	74 2d                	je     401d04 <readInput+0xbb>
            {
                putChar(c);
  401cd7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401cda:	0f be c0             	movsbl %al,%eax
  401cdd:	89 c7                	mov    %eax,%edi
  401cdf:	e8 78 f9 ff ff       	callq  40165c <putChar>
                buffer[(*size)++] = c;
  401ce4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401ce8:	8b 00                	mov    (%rax),%eax
  401cea:	8d 48 01             	lea    0x1(%rax),%ecx
  401ced:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401cf1:	89 0a                	mov    %ecx,(%rdx)
  401cf3:	48 63 d0             	movslq %eax,%rdx
  401cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401cfa:	48 01 d0             	add    %rdx,%rax
  401cfd:	8b 55 f8             	mov    -0x8(%rbp),%edx
  401d00:	88 10                	mov    %dl,(%rax)
  401d02:	eb 29                	jmp    401d2d <readInput+0xe4>
            }
            else if (c == '\b' && (*size) > 0) // solo borro si escribi algo
  401d04:	83 7d f8 08          	cmpl   $0x8,-0x8(%rbp)
  401d08:	75 23                	jne    401d2d <readInput+0xe4>
  401d0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401d0e:	8b 00                	mov    (%rax),%eax
  401d10:	85 c0                	test   %eax,%eax
  401d12:	7e 19                	jle    401d2d <readInput+0xe4>
            {
                putChar('\b');
  401d14:	bf 08 00 00 00       	mov    $0x8,%edi
  401d19:	e8 3e f9 ff ff       	callq  40165c <putChar>
                (*size)--;
  401d1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401d22:	8b 00                	mov    (%rax),%eax
  401d24:	8d 50 ff             	lea    -0x1(%rax),%edx
  401d27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401d2b:	89 10                	mov    %edx,(%rax)
            }
            c=0;
  401d2d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    while ((*size) < (maxSize - 1) && ((c = getRealChar()) != '\n')  && (c != UP_ARROW) && (c != DOWN_ARROW))
  401d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401d38:	8b 00                	mov    (%rax),%eax
  401d3a:	8b 55 d0             	mov    -0x30(%rbp),%edx
  401d3d:	83 ea 01             	sub    $0x1,%edx
  401d40:	39 d0                	cmp    %edx,%eax
  401d42:	7d 29                	jge    401d6d <readInput+0x124>
  401d44:	b8 00 00 00 00       	mov    $0x0,%eax
  401d49:	e8 bf f8 ff ff       	callq  40160d <getRealChar>
  401d4e:	89 45 f8             	mov    %eax,-0x8(%rbp)
  401d51:	83 7d f8 0a          	cmpl   $0xa,-0x8(%rbp)
  401d55:	74 16                	je     401d6d <readInput+0x124>
  401d57:	81 7d f8 f5 01 00 00 	cmpl   $0x1f5,-0x8(%rbp)
  401d5e:	74 0d                	je     401d6d <readInput+0x124>
  401d60:	81 7d f8 f6 01 00 00 	cmpl   $0x1f6,-0x8(%rbp)
  401d67:	0f 85 05 ff ff ff    	jne    401c72 <readInput+0x29>
    }
    if (c == UP_ARROW || c == DOWN_ARROW) {
  401d6d:	81 7d f8 f5 01 00 00 	cmpl   $0x1f5,-0x8(%rbp)
  401d74:	74 09                	je     401d7f <readInput+0x136>
  401d76:	81 7d f8 f6 01 00 00 	cmpl   $0x1f6,-0x8(%rbp)
  401d7d:	75 31                	jne    401db0 <readInput+0x167>
        currentShell = currentShell == 0 ? 1 : 0;
  401d7f:	8b 05 43 33 00 00    	mov    0x3343(%rip),%eax        # 4050c8 <currentShell>
  401d85:	85 c0                	test   %eax,%eax
  401d87:	0f 94 c0             	sete   %al
  401d8a:	0f b6 c0             	movzbl %al,%eax
  401d8d:	89 05 35 33 00 00    	mov    %eax,0x3335(%rip)        # 4050c8 <currentShell>
        buffer[(*size)] = 0;
  401d93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401d97:	8b 00                	mov    (%rax),%eax
  401d99:	48 63 d0             	movslq %eax,%rdx
  401d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401da0:	48 01 d0             	add    %rdx,%rax
  401da3:	c6 00 00             	movb   $0x0,(%rax)
        return c - 500;
  401da6:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401da9:	2d f4 01 00 00       	sub    $0x1f4,%eax
  401dae:	eb 2c                	jmp    401ddc <readInput+0x193>
    }
    buffer[(*size)] = 0;
  401db0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401db4:	8b 00                	mov    (%rax),%eax
  401db6:	48 63 d0             	movslq %eax,%rdx
  401db9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401dbd:	48 01 d0             	add    %rdx,%rax
  401dc0:	c6 00 00             	movb   $0x0,(%rax)
    putChar('\n');
  401dc3:	bf 0a 00 00 00       	mov    $0xa,%edi
  401dc8:	e8 8f f8 ff ff       	callq  40165c <putChar>
    (*size) = 0;
  401dcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401dd1:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    return 0;
  401dd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  401ddc:	c9                   	leaveq 
  401ddd:	c3                   	retq   

0000000000401dde <cmdIndex>:

// retorna -1 si el buffer no tiene ningun comando valido
int cmdIndex(char * buf) {
  401dde:	55                   	push   %rbp
  401ddf:	48 89 e5             	mov    %rsp,%rbp
  401de2:	48 83 ec 20          	sub    $0x20,%rsp
  401de6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)


    for (int i = 0 ; i < cmdCounter ; i++) {
  401dea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  401df1:	eb 39                	jmp    401e2c <cmdIndex+0x4e>
        if (strcmp(buf,shellCommands[i].name)==0)
  401df3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401df6:	48 63 d0             	movslq %eax,%rdx
  401df9:	48 89 d0             	mov    %rdx,%rax
  401dfc:	48 01 c0             	add    %rax,%rax
  401dff:	48 01 d0             	add    %rdx,%rax
  401e02:	48 c1 e0 03          	shl    $0x3,%rax
  401e06:	48 05 c0 58 40 00    	add    $0x4058c0,%rax
  401e0c:	48 8b 50 08          	mov    0x8(%rax),%rdx
  401e10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401e14:	48 89 d6             	mov    %rdx,%rsi
  401e17:	48 89 c7             	mov    %rax,%rdi
  401e1a:	e8 32 f7 ff ff       	callq  401551 <strcmp>
  401e1f:	85 c0                	test   %eax,%eax
  401e21:	75 05                	jne    401e28 <cmdIndex+0x4a>
            return i;
  401e23:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401e26:	eb 14                	jmp    401e3c <cmdIndex+0x5e>
    for (int i = 0 ; i < cmdCounter ; i++) {
  401e28:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  401e2c:	8b 05 de 33 00 00    	mov    0x33de(%rip),%eax        # 405210 <cmdCounter>
  401e32:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  401e35:	7c bc                	jl     401df3 <cmdIndex+0x15>
    }
    return -1;
  401e37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  401e3c:	c9                   	leaveq 
  401e3d:	c3                   	retq   

0000000000401e3e <multipleWindows>:

// UP = 501, DOWN = 502, LEFT%4 = 503, RIGHT%4 = 504
static const int windowChange[4][4] = {{2,2,1,1}, {3,3,0,0},{0,0,3,3},{1,1,2,2}};
static int kbPress = 0;

void multipleWindows() {
  401e3e:	55                   	push   %rbp
  401e3f:	48 89 e5             	mov    %rsp,%rbp
    //set_routine(&alwaysUpdate);
    set_kb_target(&kbPress);
  401e42:	bf 90 5b 40 00       	mov    $0x405b90,%edi
  401e47:	e8 28 e4 ff ff       	callq  400274 <set_kb_target>
    window = 0;
  401e4c:	c7 05 36 3d 00 00 00 	movl   $0x0,0x3d36(%rip)        # 405b8c <window>
  401e53:	00 00 00 
    split_screen(1,0);
  401e56:	be 00 00 00 00       	mov    $0x0,%esi
  401e5b:	bf 01 00 00 00       	mov    $0x1,%edi
  401e60:	e8 d7 e2 ff ff       	callq  40013c <split_screen>
    console_clear();
  401e65:	b8 00 00 00 00       	mov    $0x0,%eax
  401e6a:	e8 99 e2 ff ff       	callq  400108 <console_clear>
    split_screen(4,0);
  401e6f:	be 00 00 00 00       	mov    $0x0,%esi
  401e74:	bf 04 00 00 00       	mov    $0x4,%edi
  401e79:	e8 be e2 ff ff       	callq  40013c <split_screen>
    setup();
  401e7e:	b8 00 00 00 00       	mov    $0x0,%eax
  401e83:	e8 76 03 00 00       	callq  4021fe <setup>
    while(1) {
        set_screen(window);
  401e88:	8b 05 fe 3c 00 00    	mov    0x3cfe(%rip),%eax        # 405b8c <window>
  401e8e:	89 c7                	mov    %eax,%edi
  401e90:	e8 db e2 ff ff       	callq  400170 <set_screen>
        if (kbPress) {
  401e95:	8b 05 f5 3c 00 00    	mov    0x3cf5(%rip),%eax        # 405b90 <kbPress>
  401e9b:	85 c0                	test   %eax,%eax
  401e9d:	0f 84 41 01 00 00    	je     401fe4 <multipleWindows+0x1a6>
            if (ARROW(kbPress)) {
  401ea3:	8b 05 e7 3c 00 00    	mov    0x3ce7(%rip),%eax        # 405b90 <kbPress>
  401ea9:	3d f5 01 00 00       	cmp    $0x1f5,%eax
  401eae:	74 27                	je     401ed7 <multipleWindows+0x99>
  401eb0:	8b 05 da 3c 00 00    	mov    0x3cda(%rip),%eax        # 405b90 <kbPress>
  401eb6:	3d f6 01 00 00       	cmp    $0x1f6,%eax
  401ebb:	74 1a                	je     401ed7 <multipleWindows+0x99>
  401ebd:	8b 05 cd 3c 00 00    	mov    0x3ccd(%rip),%eax        # 405b90 <kbPress>
  401ec3:	3d f7 01 00 00       	cmp    $0x1f7,%eax
  401ec8:	74 0d                	je     401ed7 <multipleWindows+0x99>
  401eca:	8b 05 c0 3c 00 00    	mov    0x3cc0(%rip),%eax        # 405b90 <kbPress>
  401ed0:	3d f8 01 00 00       	cmp    $0x1f8,%eax
  401ed5:	75 2f                	jne    401f06 <multipleWindows+0xc8>
                window = windowChange[window][kbPress-501];
  401ed7:	8b 15 af 3c 00 00    	mov    0x3caf(%rip),%edx        # 405b8c <window>
  401edd:	8b 05 ad 3c 00 00    	mov    0x3cad(%rip),%eax        # 405b90 <kbPress>
  401ee3:	2d f5 01 00 00       	sub    $0x1f5,%eax
  401ee8:	48 98                	cltq   
  401eea:	48 63 d2             	movslq %edx,%rdx
  401eed:	48 c1 e2 02          	shl    $0x2,%rdx
  401ef1:	48 01 d0             	add    %rdx,%rax
  401ef4:	8b 04 85 80 32 40 00 	mov    0x403280(,%rax,4),%eax
  401efb:	89 05 8b 3c 00 00    	mov    %eax,0x3c8b(%rip)        # 405b8c <window>
  401f01:	e9 d4 00 00 00       	jmpq   401fda <multipleWindows+0x19c>
            }
            else {
                switch(kbPress) {
  401f06:	8b 05 84 3c 00 00    	mov    0x3c84(%rip),%eax        # 405b90 <kbPress>
  401f0c:	83 f8 08             	cmp    $0x8,%eax
  401f0f:	74 1b                	je     401f2c <multipleWindows+0xee>
  401f11:	83 f8 0a             	cmp    $0xa,%eax
  401f14:	0f 85 b3 00 00 00    	jne    401fcd <multipleWindows+0x18f>
                    case '\n':
                        processInput(window);
  401f1a:	8b 05 6c 3c 00 00    	mov    0x3c6c(%rip),%eax        # 405b8c <window>
  401f20:	89 c7                	mov    %eax,%edi
  401f22:	e8 cc 00 00 00       	callq  401ff3 <processInput>
                    break;
  401f27:	e9 ae 00 00 00       	jmpq   401fda <multipleWindows+0x19c>
                    case '\b':
                    if (buffers[window].bSize>0) {
  401f2c:	8b 05 5a 3c 00 00    	mov    0x3c5a(%rip),%eax        # 405b8c <window>
  401f32:	48 63 d0             	movslq %eax,%rdx
  401f35:	48 89 d0             	mov    %rdx,%rax
  401f38:	48 c1 e0 02          	shl    $0x2,%rax
  401f3c:	48 01 d0             	add    %rdx,%rax
  401f3f:	48 c1 e0 04          	shl    $0x4,%rax
  401f43:	48 83 c0 40          	add    $0x40,%rax
  401f47:	48 05 c0 59 40 00    	add    $0x4059c0,%rax
  401f4d:	8b 40 0c             	mov    0xc(%rax),%eax
  401f50:	85 c0                	test   %eax,%eax
  401f52:	7e 77                	jle    401fcb <multipleWindows+0x18d>
                        buffers[window].buffer[buffers[window].bSize--] = 0;
  401f54:	8b 3d 32 3c 00 00    	mov    0x3c32(%rip),%edi        # 405b8c <window>
  401f5a:	8b 0d 2c 3c 00 00    	mov    0x3c2c(%rip),%ecx        # 405b8c <window>
  401f60:	48 63 d1             	movslq %ecx,%rdx
  401f63:	48 89 d0             	mov    %rdx,%rax
  401f66:	48 c1 e0 02          	shl    $0x2,%rax
  401f6a:	48 01 d0             	add    %rdx,%rax
  401f6d:	48 c1 e0 04          	shl    $0x4,%rax
  401f71:	48 83 c0 40          	add    $0x40,%rax
  401f75:	48 05 c0 59 40 00    	add    $0x4059c0,%rax
  401f7b:	8b 50 0c             	mov    0xc(%rax),%edx
  401f7e:	8d 72 ff             	lea    -0x1(%rdx),%esi
  401f81:	48 63 c9             	movslq %ecx,%rcx
  401f84:	48 89 c8             	mov    %rcx,%rax
  401f87:	48 c1 e0 02          	shl    $0x2,%rax
  401f8b:	48 01 c8             	add    %rcx,%rax
  401f8e:	48 c1 e0 04          	shl    $0x4,%rax
  401f92:	48 83 c0 40          	add    $0x40,%rax
  401f96:	48 05 c0 59 40 00    	add    $0x4059c0,%rax
  401f9c:	89 70 0c             	mov    %esi,0xc(%rax)
  401f9f:	48 63 ca             	movslq %edx,%rcx
  401fa2:	48 63 d7             	movslq %edi,%rdx
  401fa5:	48 89 d0             	mov    %rdx,%rax
  401fa8:	48 c1 e0 02          	shl    $0x2,%rax
  401fac:	48 01 d0             	add    %rdx,%rax
  401faf:	48 c1 e0 04          	shl    $0x4,%rax
  401fb3:	48 01 c8             	add    %rcx,%rax
  401fb6:	48 05 c0 59 40 00    	add    $0x4059c0,%rax
  401fbc:	c6 00 00             	movb   $0x0,(%rax)
                        putChar('\b');
  401fbf:	bf 08 00 00 00       	mov    $0x8,%edi
  401fc4:	e8 93 f6 ff ff       	callq  40165c <putChar>
                    }
                    break;
  401fc9:	eb 0f                	jmp    401fda <multipleWindows+0x19c>
  401fcb:	eb 0d                	jmp    401fda <multipleWindows+0x19c>
                    default:
                        writeBuf(window);
  401fcd:	8b 05 b9 3b 00 00    	mov    0x3bb9(%rip),%eax        # 405b8c <window>
  401fd3:	89 c7                	mov    %eax,%edi
  401fd5:	e8 be 00 00 00       	callq  402098 <writeBuf>
                }
            }
            kbPress = 0;
  401fda:	c7 05 ac 3b 00 00 00 	movl   $0x0,0x3bac(%rip)        # 405b90 <kbPress>
  401fe1:	00 00 00 
        }
        alwaysUpdate();
  401fe4:	b8 00 00 00 00       	mov    $0x0,%eax
  401fe9:	e8 21 01 00 00       	callq  40210f <alwaysUpdate>
    }   
  401fee:	e9 95 fe ff ff       	jmpq   401e88 <multipleWindows+0x4a>

0000000000401ff3 <processInput>:
}

void processInput(int window) {
  401ff3:	55                   	push   %rbp
  401ff4:	48 89 e5             	mov    %rsp,%rbp
  401ff7:	48 83 ec 20          	sub    $0x20,%rsp
  401ffb:	89 7d ec             	mov    %edi,-0x14(%rbp)
    BufT * buf = &buffers[window];
  401ffe:	8b 45 ec             	mov    -0x14(%rbp),%eax
  402001:	48 63 d0             	movslq %eax,%rdx
  402004:	48 89 d0             	mov    %rdx,%rax
  402007:	48 c1 e0 02          	shl    $0x2,%rax
  40200b:	48 01 d0             	add    %rdx,%rax
  40200e:	48 c1 e0 04          	shl    $0x4,%rax
  402012:	48 05 c0 59 40 00    	add    $0x4059c0,%rax
  402018:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    switch(window) {
  40201c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40201f:	83 f8 02             	cmp    $0x2,%eax
  402022:	74 17                	je     40203b <processInput+0x48>
  402024:	83 f8 03             	cmp    $0x3,%eax
  402027:	74 20                	je     402049 <processInput+0x56>
  402029:	85 c0                	test   %eax,%eax
  40202b:	75 29                	jne    402056 <processInput+0x63>
        case 0: manageSudoku(buf);
  40202d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402031:	48 89 c7             	mov    %rax,%rdi
  402034:	e8 87 04 00 00       	callq  4024c0 <manageSudoku>
        break;
  402039:	eb 1b                	jmp    402056 <processInput+0x63>
        case 2: manageHangman(buf); 
  40203b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40203f:	48 89 c7             	mov    %rax,%rdi
  402042:	e8 66 03 00 00       	callq  4023ad <manageHangman>
        break;
  402047:	eb 0d                	jmp    402056 <processInput+0x63>
        case 3: manageStopwatch(buf);
  402049:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40204d:	48 89 c7             	mov    %rax,%rdi
  402050:	e8 aa 02 00 00       	callq  4022ff <manageStopwatch>
        break;
  402055:	90                   	nop
    }
    buf->buffer[0] = 0;
  402056:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40205a:	c6 00 00             	movb   $0x0,(%rax)
    buf->bSize = 0;
  40205d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402061:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)

    if (buf->msg[0]) {
  402068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40206c:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  402070:	84 c0                	test   %al,%al
  402072:	74 22                	je     402096 <processInput+0xa3>
        clear_line();
  402074:	b8 00 00 00 00       	mov    $0x0,%eax
  402079:	e8 5a e1 ff ff       	callq  4001d8 <clear_line>
        print(buf->msg);
  40207e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402082:	48 83 c0 19          	add    $0x19,%rax
  402086:	48 89 c7             	mov    %rax,%rdi
  402089:	e8 7e ef ff ff       	callq  40100c <print>
        buf->msg[0] = 0;
  40208e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402092:	c6 40 19 00          	movb   $0x0,0x19(%rax)
    }
}
  402096:	c9                   	leaveq 
  402097:	c3                   	retq   

0000000000402098 <writeBuf>:

void writeBuf(int win) {
  402098:	55                   	push   %rbp
  402099:	48 89 e5             	mov    %rsp,%rbp
  40209c:	48 83 ec 20          	sub    $0x20,%rsp
  4020a0:	89 7d ec             	mov    %edi,-0x14(%rbp)
    BufT * buf = &buffers[window];
  4020a3:	8b 05 e3 3a 00 00    	mov    0x3ae3(%rip),%eax        # 405b8c <window>
  4020a9:	48 63 d0             	movslq %eax,%rdx
  4020ac:	48 89 d0             	mov    %rdx,%rax
  4020af:	48 c1 e0 02          	shl    $0x2,%rax
  4020b3:	48 01 d0             	add    %rdx,%rax
  4020b6:	48 c1 e0 04          	shl    $0x4,%rax
  4020ba:	48 05 c0 59 40 00    	add    $0x4059c0,%rax
  4020c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    buf->buffer[buf->bSize++] = kbPress;
  4020c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4020c8:	8b 40 4c             	mov    0x4c(%rax),%eax
  4020cb:	8d 48 01             	lea    0x1(%rax),%ecx
  4020ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4020d2:	89 4a 4c             	mov    %ecx,0x4c(%rdx)
  4020d5:	8b 15 b5 3a 00 00    	mov    0x3ab5(%rip),%edx        # 405b90 <kbPress>
  4020db:	89 d1                	mov    %edx,%ecx
  4020dd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4020e1:	48 98                	cltq   
  4020e3:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
    buf->buffer[buf->bSize] = 0;
  4020e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4020ea:	8b 40 4c             	mov    0x4c(%rax),%eax
  4020ed:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4020f1:	48 98                	cltq   
  4020f3:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
    clear_line();
  4020f7:	b8 00 00 00 00       	mov    $0x0,%eax
  4020fc:	e8 d7 e0 ff ff       	callq  4001d8 <clear_line>
    print(buf->buffer);
  402101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402105:	48 89 c7             	mov    %rax,%rdi
  402108:	e8 ff ee ff ff       	callq  40100c <print>
}
  40210d:	c9                   	leaveq 
  40210e:	c3                   	retq   

000000000040210f <alwaysUpdate>:

void alwaysUpdate() {
  40210f:	55                   	push   %rbp
  402110:	48 89 e5             	mov    %rsp,%rbp
  402113:	48 83 ec 10          	sub    $0x10,%rsp
    for (int i=0 ; i<4 ; i++) {
  402117:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40211e:	e9 c2 00 00 00       	jmpq   4021e5 <alwaysUpdate+0xd6>
        set_screen(i);
  402123:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402126:	89 c7                	mov    %eax,%edi
  402128:	e8 43 e0 ff ff       	callq  400170 <set_screen>
        switch(i) {
  40212d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402130:	83 f8 01             	cmp    $0x1,%eax
  402133:	74 1f                	je     402154 <alwaysUpdate+0x45>
  402135:	83 f8 01             	cmp    $0x1,%eax
  402138:	7f 07                	jg     402141 <alwaysUpdate+0x32>
  40213a:	85 c0                	test   %eax,%eax
            case 0: 

            break;
  40213c:	e9 a0 00 00 00       	jmpq   4021e1 <alwaysUpdate+0xd2>
        switch(i) {
  402141:	83 f8 02             	cmp    $0x2,%eax
  402144:	0f 84 96 00 00 00    	je     4021e0 <alwaysUpdate+0xd1>
  40214a:	83 f8 03             	cmp    $0x3,%eax
  40214d:	74 49                	je     402198 <alwaysUpdate+0x89>
  40214f:	e9 8d 00 00 00       	jmpq   4021e1 <alwaysUpdate+0xd2>

            case 1:
                get_time(aux);
  402154:	bf 80 5b 40 00       	mov    $0x405b80,%edi
  402159:	e8 ae e0 ff ff       	callq  40020c <get_time>
                if (strcmp(timeBuf,aux)) {
  40215e:	be 80 5b 40 00       	mov    $0x405b80,%esi
  402163:	bf 00 5b 40 00       	mov    $0x405b00,%edi
  402168:	e8 e4 f3 ff ff       	callq  401551 <strcmp>
  40216d:	85 c0                	test   %eax,%eax
  40216f:	74 25                	je     402196 <alwaysUpdate+0x87>
                    console_clear();
  402171:	b8 00 00 00 00       	mov    $0x0,%eax
  402176:	e8 8d df ff ff       	callq  400108 <console_clear>
                    manageTime(aux);
  40217b:	bf 80 5b 40 00       	mov    $0x405b80,%edi
  402180:	e8 34 01 00 00       	callq  4022b9 <manageTime>
                    strcpy(timeBuf, aux); 
  402185:	be 80 5b 40 00       	mov    $0x405b80,%esi
  40218a:	bf 00 5b 40 00       	mov    $0x405b00,%edi
  40218f:	e8 12 f4 ff ff       	callq  4015a6 <strcpy>
                }
            break;
  402194:	eb 4b                	jmp    4021e1 <alwaysUpdate+0xd2>
  402196:	eb 49                	jmp    4021e1 <alwaysUpdate+0xd2>
            case 2:
            
            break;

            case 3:
            if (stopWatchChanged()) {
  402198:	b8 00 00 00 00       	mov    $0x0,%eax
  40219d:	e8 58 eb ff ff       	callq  400cfa <stopWatchChanged>
  4021a2:	85 c0                	test   %eax,%eax
  4021a4:	74 38                	je     4021de <alwaysUpdate+0xcf>
                console_clear();
  4021a6:	b8 00 00 00 00       	mov    $0x0,%eax
  4021ab:	e8 58 df ff ff       	callq  400108 <console_clear>
                printStopWatch();
  4021b0:	b8 00 00 00 00       	mov    $0x0,%eax
  4021b5:	e8 29 ec ff ff       	callq  400de3 <printStopWatch>
                print(buffers[i].buffer);
  4021ba:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4021bd:	48 63 d0             	movslq %eax,%rdx
  4021c0:	48 89 d0             	mov    %rdx,%rax
  4021c3:	48 c1 e0 02          	shl    $0x2,%rax
  4021c7:	48 01 d0             	add    %rdx,%rax
  4021ca:	48 c1 e0 04          	shl    $0x4,%rax
  4021ce:	48 05 c0 59 40 00    	add    $0x4059c0,%rax
  4021d4:	48 89 c7             	mov    %rax,%rdi
  4021d7:	e8 30 ee ff ff       	callq  40100c <print>
            }
            break;
  4021dc:	eb 03                	jmp    4021e1 <alwaysUpdate+0xd2>
  4021de:	eb 01                	jmp    4021e1 <alwaysUpdate+0xd2>
            break;
  4021e0:	90                   	nop
    for (int i=0 ; i<4 ; i++) {
  4021e1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4021e5:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  4021e9:	0f 8e 34 ff ff ff    	jle    402123 <alwaysUpdate+0x14>
        }
    }
    set_screen(window);
  4021ef:	8b 05 97 39 00 00    	mov    0x3997(%rip),%eax        # 405b8c <window>
  4021f5:	89 c7                	mov    %eax,%edi
  4021f7:	e8 74 df ff ff       	callq  400170 <set_screen>
}
  4021fc:	c9                   	leaveq 
  4021fd:	c3                   	retq   

00000000004021fe <setup>:

void setup() {
  4021fe:	55                   	push   %rbp
  4021ff:	48 89 e5             	mov    %rsp,%rbp
  402202:	48 83 ec 10          	sub    $0x10,%rsp
    for (int i=0 ; i<4 ; i++) {
  402206:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40220d:	e9 8e 00 00 00       	jmpq   4022a0 <setup+0xa2>
        set_screen(i);
  402212:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402215:	89 c7                	mov    %eax,%edi
  402217:	e8 54 df ff ff       	callq  400170 <set_screen>
        console_clear();
  40221c:	b8 00 00 00 00       	mov    $0x0,%eax
  402221:	e8 e2 de ff ff       	callq  400108 <console_clear>
        switch(i) {
  402226:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402229:	83 f8 01             	cmp    $0x1,%eax
  40222c:	74 2d                	je     40225b <setup+0x5d>
  40222e:	83 f8 01             	cmp    $0x1,%eax
  402231:	7f 06                	jg     402239 <setup+0x3b>
  402233:	85 c0                	test   %eax,%eax
  402235:	74 0e                	je     402245 <setup+0x47>
  402237:	eb 63                	jmp    40229c <setup+0x9e>
  402239:	83 f8 02             	cmp    $0x2,%eax
  40223c:	74 49                	je     402287 <setup+0x89>
  40223e:	83 f8 03             	cmp    $0x3,%eax
  402241:	74 2e                	je     402271 <setup+0x73>
  402243:	eb 57                	jmp    40229c <setup+0x9e>
            case 0: 
               initSudoku();
  402245:	b8 00 00 00 00       	mov    $0x0,%eax
  40224a:	e8 8d e9 ff ff       	callq  400bdc <initSudoku>
                printBoard();
  40224f:	b8 00 00 00 00       	mov    $0x0,%eax
  402254:	e8 bb e6 ff ff       	callq  400914 <printBoard>
            break;
  402259:	eb 41                	jmp    40229c <setup+0x9e>

            case 1:
                get_time(timeBuf);
  40225b:	bf 00 5b 40 00       	mov    $0x405b00,%edi
  402260:	e8 a7 df ff ff       	callq  40020c <get_time>
                manageTime(timeBuf);
  402265:	bf 00 5b 40 00       	mov    $0x405b00,%edi
  40226a:	e8 4a 00 00 00       	callq  4022b9 <manageTime>
            break;
  40226f:	eb 2b                	jmp    40229c <setup+0x9e>

            case 3:
                initStopWatch();
  402271:	b8 00 00 00 00       	mov    $0x0,%eax
  402276:	e8 d1 e9 ff ff       	callq  400c4c <initStopWatch>
                printStopWatch();
  40227b:	b8 00 00 00 00       	mov    $0x0,%eax
  402280:	e8 5e eb ff ff       	callq  400de3 <printStopWatch>
            break;
  402285:	eb 15                	jmp    40229c <setup+0x9e>

            case 2:
                initHangman();
  402287:	b8 00 00 00 00       	mov    $0x0,%eax
  40228c:	e8 bf e2 ff ff       	callq  400550 <initHangman>
                printHangman();
  402291:	b8 00 00 00 00       	mov    $0x0,%eax
  402296:	e8 33 e3 ff ff       	callq  4005ce <printHangman>
            break;
  40229b:	90                   	nop
    for (int i=0 ; i<4 ; i++) {
  40229c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4022a0:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  4022a4:	0f 8e 68 ff ff ff    	jle    402212 <setup+0x14>
        }
    }
    set_screen(window);
  4022aa:	8b 05 dc 38 00 00    	mov    0x38dc(%rip),%eax        # 405b8c <window>
  4022b0:	89 c7                	mov    %eax,%edi
  4022b2:	e8 b9 de ff ff       	callq  400170 <set_screen>
}
  4022b7:	c9                   	leaveq 
  4022b8:	c3                   	retq   

00000000004022b9 <manageTime>:

void manageTime(char * time) {
  4022b9:	55                   	push   %rbp
  4022ba:	48 89 e5             	mov    %rsp,%rbp
  4022bd:	48 83 ec 20          	sub    $0x20,%rsp
  4022c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    for (int i=0 ; i<6; i++)
  4022c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  4022cc:	eb 0e                	jmp    4022dc <manageTime+0x23>
        putChar('\n');
  4022ce:	bf 0a 00 00 00       	mov    $0xa,%edi
  4022d3:	e8 84 f3 ff ff       	callq  40165c <putChar>
    for (int i=0 ; i<6; i++)
  4022d8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4022dc:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  4022e0:	7e ec                	jle    4022ce <manageTime+0x15>
        print("                ");
  4022e2:	bf c0 32 40 00       	mov    $0x4032c0,%edi
  4022e7:	e8 20 ed ff ff       	callq  40100c <print>
        printColor(time, BLUE | GREY_BG);
  4022ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4022f0:	be 71 00 00 00       	mov    $0x71,%esi
  4022f5:	48 89 c7             	mov    %rax,%rdi
  4022f8:	e8 ca ec ff ff       	callq  400fc7 <printColor>
}
  4022fd:	c9                   	leaveq 
  4022fe:	c3                   	retq   

00000000004022ff <manageStopwatch>:

void manageStopwatch(BufT * buf) {
  4022ff:	55                   	push   %rbp
  402300:	48 89 e5             	mov    %rsp,%rbp
  402303:	48 83 ec 10          	sub    $0x10,%rsp
  402307:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if (strcmp(buf->buffer,"start")==0) {
  40230b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40230f:	be d1 32 40 00       	mov    $0x4032d1,%esi
  402314:	48 89 c7             	mov    %rax,%rdi
  402317:	e8 35 f2 ff ff       	callq  401551 <strcmp>
  40231c:	85 c0                	test   %eax,%eax
  40231e:	75 0c                	jne    40232c <manageStopwatch+0x2d>
        stopWatchStart();
  402320:	b8 00 00 00 00       	mov    $0x0,%eax
  402325:	e8 73 e9 ff ff       	callq  400c9d <stopWatchStart>
  40232a:	eb 75                	jmp    4023a1 <manageStopwatch+0xa2>
    }
    else if (strcmp(buf->buffer,"stop")==0) {
  40232c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402330:	be d7 32 40 00       	mov    $0x4032d7,%esi
  402335:	48 89 c7             	mov    %rax,%rdi
  402338:	e8 14 f2 ff ff       	callq  401551 <strcmp>
  40233d:	85 c0                	test   %eax,%eax
  40233f:	75 0c                	jne    40234d <manageStopwatch+0x4e>
        stopWatchStop();
  402341:	b8 00 00 00 00       	mov    $0x0,%eax
  402346:	e8 52 ea ff ff       	callq  400d9d <stopWatchStop>
  40234b:	eb 54                	jmp    4023a1 <manageStopwatch+0xa2>
    }
    else if (strcmp(buf->buffer,"reset")==0) {
  40234d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402351:	be dc 32 40 00       	mov    $0x4032dc,%esi
  402356:	48 89 c7             	mov    %rax,%rdi
  402359:	e8 f3 f1 ff ff       	callq  401551 <strcmp>
  40235e:	85 c0                	test   %eax,%eax
  402360:	75 2a                	jne    40238c <manageStopwatch+0x8d>
        stopWatchStop();
  402362:	b8 00 00 00 00       	mov    $0x0,%eax
  402367:	e8 31 ea ff ff       	callq  400d9d <stopWatchStop>
        initStopWatch();
  40236c:	b8 00 00 00 00       	mov    $0x0,%eax
  402371:	e8 d6 e8 ff ff       	callq  400c4c <initStopWatch>
        console_clear();
  402376:	b8 00 00 00 00       	mov    $0x0,%eax
  40237b:	e8 88 dd ff ff       	callq  400108 <console_clear>
        printStopWatch();
  402380:	b8 00 00 00 00       	mov    $0x0,%eax
  402385:	e8 59 ea ff ff       	callq  400de3 <printStopWatch>
  40238a:	eb 15                	jmp    4023a1 <manageStopwatch+0xa2>
    }
    else {
        strcpy(buf->msg, "Entrada invalida");
  40238c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402390:	48 83 c0 19          	add    $0x19,%rax
  402394:	be e2 32 40 00       	mov    $0x4032e2,%esi
  402399:	48 89 c7             	mov    %rax,%rdi
  40239c:	e8 05 f2 ff ff       	callq  4015a6 <strcpy>
    }
    clear_line();
  4023a1:	b8 00 00 00 00       	mov    $0x0,%eax
  4023a6:	e8 2d de ff ff       	callq  4001d8 <clear_line>
}
  4023ab:	c9                   	leaveq 
  4023ac:	c3                   	retq   

00000000004023ad <manageHangman>:

void manageHangman(BufT * buf) {
  4023ad:	55                   	push   %rbp
  4023ae:	48 89 e5             	mov    %rsp,%rbp
  4023b1:	48 83 ec 20          	sub    $0x20,%rsp
  4023b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    char * buffer = buf->buffer;
  4023b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4023bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    if (strcmp(buffer,"reset")==0) {
  4023c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4023c5:	be dc 32 40 00       	mov    $0x4032dc,%esi
  4023ca:	48 89 c7             	mov    %rax,%rdi
  4023cd:	e8 7f f1 ff ff       	callq  401551 <strcmp>
  4023d2:	85 c0                	test   %eax,%eax
  4023d4:	75 0f                	jne    4023e5 <manageHangman+0x38>
        initHangman();
  4023d6:	b8 00 00 00 00       	mov    $0x0,%eax
  4023db:	e8 70 e1 ff ff       	callq  400550 <initHangman>
  4023e0:	e9 c5 00 00 00       	jmpq   4024aa <manageHangman+0xfd>
    }
    else if (strcmp(buffer,"solve")==0) {
  4023e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4023e9:	be f3 32 40 00       	mov    $0x4032f3,%esi
  4023ee:	48 89 c7             	mov    %rax,%rdi
  4023f1:	e8 5b f1 ff ff       	callq  401551 <strcmp>
  4023f6:	85 c0                	test   %eax,%eax
  4023f8:	75 0f                	jne    402409 <manageHangman+0x5c>
        solveHangman();
  4023fa:	b8 00 00 00 00       	mov    $0x0,%eax
  4023ff:	e8 03 e1 ff ff       	callq  400507 <solveHangman>
  402404:	e9 a1 00 00 00       	jmpq   4024aa <manageHangman+0xfd>
    }
    else {
        int value = inputLetter(buffer);
  402409:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40240d:	48 89 c7             	mov    %rax,%rdi
  402410:	e8 75 df ff ff       	callq  40038a <inputLetter>
  402415:	89 45 f4             	mov    %eax,-0xc(%rbp)
        switch(value) {
  402418:	83 7d f4 05          	cmpl   $0x5,-0xc(%rbp)
  40241c:	0f 87 80 00 00 00    	ja     4024a2 <manageHangman+0xf5>
  402422:	8b 45 f4             	mov    -0xc(%rbp),%eax
  402425:	48 8b 04 c5 a0 33 40 	mov    0x4033a0(,%rax,8),%rax
  40242c:	00 
  40242d:	ff e0                	jmpq   *%rax
            case NOT_LETTER: strcpy(buf->msg, "El caracter ingresado no es una letra valida");
  40242f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402433:	48 83 c0 19          	add    $0x19,%rax
  402437:	be 00 33 40 00       	mov    $0x403300,%esi
  40243c:	48 89 c7             	mov    %rax,%rdi
  40243f:	e8 62 f1 ff ff       	callq  4015a6 <strcpy>
            break;
  402444:	eb 64                	jmp    4024aa <manageHangman+0xfd>
            case MORE_THAN_1_LETTER: strcpy(buf->msg, "Se ingreso mas de una letra");
  402446:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40244a:	48 83 c0 19          	add    $0x19,%rax
  40244e:	be 2d 33 40 00       	mov    $0x40332d,%esi
  402453:	48 89 c7             	mov    %rax,%rdi
  402456:	e8 4b f1 ff ff       	callq  4015a6 <strcpy>
            break;
  40245b:	eb 4d                	jmp    4024aa <manageHangman+0xfd>
            case GAME_COMPLETED: strcpy(buf->msg, "Felicitaciones! Juego terminado");
  40245d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402461:	48 83 c0 19          	add    $0x19,%rax
  402465:	be 50 33 40 00       	mov    $0x403350,%esi
  40246a:	48 89 c7             	mov    %rax,%rdi
  40246d:	e8 34 f1 ff ff       	callq  4015a6 <strcpy>
            break;
  402472:	eb 36                	jmp    4024aa <manageHangman+0xfd>
            case LETTER_REPEATED: strcpy(buf->msg, "La letra ya fue usada");
  402474:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402478:	48 83 c0 19          	add    $0x19,%rax
  40247c:	be 70 33 40 00       	mov    $0x403370,%esi
  402481:	48 89 c7             	mov    %rax,%rdi
  402484:	e8 1d f1 ff ff       	callq  4015a6 <strcpy>
            break;
  402489:	eb 1f                	jmp    4024aa <manageHangman+0xfd>
            case GAME_LOST: strcpy(buf->msg, "Ha perdido el juego.");
  40248b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40248f:	48 83 c0 19          	add    $0x19,%rax
  402493:	be 86 33 40 00       	mov    $0x403386,%esi
  402498:	48 89 c7             	mov    %rax,%rdi
  40249b:	e8 06 f1 ff ff       	callq  4015a6 <strcpy>
            break;
  4024a0:	eb 08                	jmp    4024aa <manageHangman+0xfd>
            default: buf->msg[0]=0;
  4024a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4024a6:	c6 40 19 00          	movb   $0x0,0x19(%rax)
        }
    }
    console_clear();
  4024aa:	b8 00 00 00 00       	mov    $0x0,%eax
  4024af:	e8 54 dc ff ff       	callq  400108 <console_clear>
    printHangman();
  4024b4:	b8 00 00 00 00       	mov    $0x0,%eax
  4024b9:	e8 10 e1 ff ff       	callq  4005ce <printHangman>
}
  4024be:	c9                   	leaveq 
  4024bf:	c3                   	retq   

00000000004024c0 <manageSudoku>:


void manageSudoku(BufT * buf) {
  4024c0:	55                   	push   %rbp
  4024c1:	48 89 e5             	mov    %rsp,%rbp
  4024c4:	53                   	push   %rbx
  4024c5:	48 83 ec 48          	sub    $0x48,%rsp
  4024c9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    char * strings [3];
    char * b = buf ->buffer;
  4024cd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4024d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    clear_line();
  4024d5:	b8 00 00 00 00       	mov    $0x0,%eax
  4024da:	e8 f9 dc ff ff       	callq  4001d8 <clear_line>


    if (strcmp(b,"solve")==0) {
  4024df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4024e3:	be f3 32 40 00       	mov    $0x4032f3,%esi
  4024e8:	48 89 c7             	mov    %rax,%rdi
  4024eb:	e8 61 f0 ff ff       	callq  401551 <strcmp>
  4024f0:	85 c0                	test   %eax,%eax
  4024f2:	75 23                	jne    402517 <manageSudoku+0x57>
        solveSudoku();
  4024f4:	b8 00 00 00 00       	mov    $0x0,%eax
  4024f9:	e8 f7 e3 ff ff       	callq  4008f5 <solveSudoku>
        console_clear();
  4024fe:	b8 00 00 00 00       	mov    $0x0,%eax
  402503:	e8 00 dc ff ff       	callq  400108 <console_clear>
        printBoard();
  402508:	b8 00 00 00 00       	mov    $0x0,%eax
  40250d:	e8 02 e4 ff ff       	callq  400914 <printBoard>
  402512:	e9 3a 01 00 00       	jmpq   402651 <manageSudoku+0x191>
    }

    else if (strcmp(b,"reset")==0) {
  402517:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40251b:	be dc 32 40 00       	mov    $0x4032dc,%esi
  402520:	48 89 c7             	mov    %rax,%rdi
  402523:	e8 29 f0 ff ff       	callq  401551 <strcmp>
  402528:	85 c0                	test   %eax,%eax
  40252a:	75 23                	jne    40254f <manageSudoku+0x8f>
        initSudoku();
  40252c:	b8 00 00 00 00       	mov    $0x0,%eax
  402531:	e8 a6 e6 ff ff       	callq  400bdc <initSudoku>
        console_clear();
  402536:	b8 00 00 00 00       	mov    $0x0,%eax
  40253b:	e8 c8 db ff ff       	callq  400108 <console_clear>
        printBoard();
  402540:	b8 00 00 00 00       	mov    $0x0,%eax
  402545:	e8 ca e3 ff ff       	callq  400914 <printBoard>
  40254a:	e9 02 01 00 00       	jmpq   402651 <manageSudoku+0x191>
    }
    
    else if (split(b,' ', strings) != 3) {
  40254f:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  402553:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402557:	be 20 00 00 00       	mov    $0x20,%esi
  40255c:	48 89 c7             	mov    %rax,%rdi
  40255f:	e8 37 f1 ff ff       	callq  40169b <split>
  402564:	83 f8 03             	cmp    $0x3,%eax
  402567:	74 14                	je     40257d <manageSudoku+0xbd>
        strcpy(msgBuf, "Entrada invalida");
  402569:	be e2 32 40 00       	mov    $0x4032e2,%esi
  40256e:	bf 40 5b 40 00       	mov    $0x405b40,%edi
  402573:	e8 2e f0 ff ff       	callq  4015a6 <strcpy>
  402578:	e9 d4 00 00 00       	jmpq   402651 <manageSudoku+0x191>
    }

    else {
        int value = sudokuInput(strings[0][0], charToDigit(strings[1][0]), charToDigit(strings[2][0]));
  40257d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402581:	0f b6 00             	movzbl (%rax),%eax
  402584:	0f be c0             	movsbl %al,%eax
  402587:	89 c7                	mov    %eax,%edi
  402589:	e8 6a ed ff ff       	callq  4012f8 <charToDigit>
  40258e:	89 c3                	mov    %eax,%ebx
  402590:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402594:	0f b6 00             	movzbl (%rax),%eax
  402597:	0f be c0             	movsbl %al,%eax
  40259a:	89 c7                	mov    %eax,%edi
  40259c:	e8 57 ed ff ff       	callq  4012f8 <charToDigit>
  4025a1:	89 c1                	mov    %eax,%ecx
  4025a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4025a7:	0f b6 00             	movzbl (%rax),%eax
  4025aa:	0f be c0             	movsbl %al,%eax
  4025ad:	89 da                	mov    %ebx,%edx
  4025af:	89 ce                	mov    %ecx,%esi
  4025b1:	89 c7                	mov    %eax,%edi
  4025b3:	e8 e3 e4 ff ff       	callq  400a9b <sudokuInput>
  4025b8:	89 45 e4             	mov    %eax,-0x1c(%rbp)

        switch(value) {
  4025bb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4025be:	83 f8 fd             	cmp    $0xfffffffd,%eax
  4025c1:	74 44                	je     402607 <manageSudoku+0x147>
  4025c3:	83 f8 fd             	cmp    $0xfffffffd,%eax
  4025c6:	7f 07                	jg     4025cf <manageSudoku+0x10f>
  4025c8:	83 f8 fc             	cmp    $0xfffffffc,%eax
  4025cb:	74 51                	je     40261e <manageSudoku+0x15e>
  4025cd:	eb 66                	jmp    402635 <manageSudoku+0x175>
  4025cf:	83 f8 fe             	cmp    $0xfffffffe,%eax
  4025d2:	74 1c                	je     4025f0 <manageSudoku+0x130>
  4025d4:	83 f8 ff             	cmp    $0xffffffff,%eax
  4025d7:	75 5c                	jne    402635 <manageSudoku+0x175>
            case OUT_OF_BOUNDS: strcpy(buf->msg, "Valores fuera de rango");
  4025d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4025dd:	48 83 c0 19          	add    $0x19,%rax
  4025e1:	be d0 33 40 00       	mov    $0x4033d0,%esi
  4025e6:	48 89 c7             	mov    %rax,%rdi
  4025e9:	e8 b8 ef ff ff       	callq  4015a6 <strcpy>
            break;
  4025ee:	eb 4d                	jmp    40263d <manageSudoku+0x17d>
            case PRED_VALUE: strcpy(buf->msg, "No se pueden modificar los verdes");
  4025f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4025f4:	48 83 c0 19          	add    $0x19,%rax
  4025f8:	be e8 33 40 00       	mov    $0x4033e8,%esi
  4025fd:	48 89 c7             	mov    %rax,%rdi
  402600:	e8 a1 ef ff ff       	callq  4015a6 <strcpy>
            break;
  402605:	eb 36                	jmp    40263d <manageSudoku+0x17d>
            case INVALID_INPUT: strcpy(buf->msg, "Jugada invalida");
  402607:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40260b:	48 83 c0 19          	add    $0x19,%rax
  40260f:	be 0a 34 40 00       	mov    $0x40340a,%esi
  402614:	48 89 c7             	mov    %rax,%rdi
  402617:	e8 8a ef ff ff       	callq  4015a6 <strcpy>
            break;
  40261c:	eb 1f                	jmp    40263d <manageSudoku+0x17d>
            case FINISHED_SUDOKU: strcpy(buf->msg, "Felicitaciones!");
  40261e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402622:	48 83 c0 19          	add    $0x19,%rax
  402626:	be 1a 34 40 00       	mov    $0x40341a,%esi
  40262b:	48 89 c7             	mov    %rax,%rdi
  40262e:	e8 73 ef ff ff       	callq  4015a6 <strcpy>
            break;
  402633:	eb 08                	jmp    40263d <manageSudoku+0x17d>
            default: buf->msg[0]=0;
  402635:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402639:	c6 40 19 00          	movb   $0x0,0x19(%rax)
        }
        console_clear();
  40263d:	b8 00 00 00 00       	mov    $0x0,%eax
  402642:	e8 c1 da ff ff       	callq  400108 <console_clear>
        printBoard();
  402647:	b8 00 00 00 00       	mov    $0x0,%eax
  40264c:	e8 c3 e2 ff ff       	callq  400914 <printBoard>
    }
    
    

  402651:	48 83 c4 48          	add    $0x48,%rsp
  402655:	5b                   	pop    %rbx
  402656:	5d                   	pop    %rbp
  402657:	c3                   	retq   
  402658:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40265f:	00 00 00 
  402662:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402669:	00 00 00 
  40266c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402673:	00 00 00 
  402676:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40267d:	00 00 00 
  402680:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402687:	00 00 00 
  40268a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402691:	00 00 00 
  402694:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40269b:	00 00 00 
  40269e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026a5:	00 00 00 
  4026a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026af:	00 00 00 
  4026b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026b9:	00 00 00 
  4026bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026c3:	00 00 00 
  4026c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026cd:	00 00 00 
  4026d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026d7:	00 00 00 
  4026da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026e1:	00 00 00 
  4026e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026eb:	00 00 00 
  4026ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026f5:	00 00 00 
  4026f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026ff:	00 00 00 
  402702:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402709:	00 00 00 
  40270c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402713:	00 00 00 
  402716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40271d:	00 00 00 
  402720:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402727:	00 00 00 
  40272a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402731:	00 00 00 
  402734:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40273b:	00 00 00 
  40273e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402745:	00 00 00 
  402748:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40274f:	00 00 00 
  402752:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402759:	00 00 00 
  40275c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402763:	00 00 00 
  402766:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40276d:	00 00 00 
  402770:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402777:	00 00 00 
  40277a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402781:	00 00 00 
  402784:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40278b:	00 00 00 
  40278e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402795:	00 00 00 
  402798:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40279f:	00 00 00 
  4027a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027a9:	00 00 00 
  4027ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027b3:	00 00 00 
  4027b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027bd:	00 00 00 
  4027c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027c7:	00 00 00 
  4027ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027d1:	00 00 00 
  4027d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027db:	00 00 00 
  4027de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027e5:	00 00 00 
  4027e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027ef:	00 00 00 
  4027f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4027f9:	00 00 00 
  4027fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402803:	00 00 00 
  402806:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40280d:	00 00 00 
  402810:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402817:	00 00 00 
  40281a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402821:	00 00 00 
  402824:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40282b:	00 00 00 
  40282e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402835:	00 00 00 
  402838:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40283f:	00 00 00 
  402842:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402849:	00 00 00 
  40284c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402853:	00 00 00 
  402856:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40285d:	00 00 00 
  402860:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402867:	00 00 00 
  40286a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402871:	00 00 00 
  402874:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40287b:	00 00 00 
  40287e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402885:	00 00 00 
  402888:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40288f:	00 00 00 
  402892:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402899:	00 00 00 
  40289c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028a3:	00 00 00 
  4028a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028ad:	00 00 00 
  4028b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028b7:	00 00 00 
  4028ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028c1:	00 00 00 
  4028c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028cb:	00 00 00 
  4028ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028d5:	00 00 00 
  4028d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028df:	00 00 00 
  4028e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028e9:	00 00 00 
  4028ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028f3:	00 00 00 
  4028f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4028fd:	00 00 00 
  402900:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402907:	00 00 00 
  40290a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402911:	00 00 00 
  402914:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40291b:	00 00 00 
  40291e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402925:	00 00 00 
  402928:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40292f:	00 00 00 
  402932:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402939:	00 00 00 
  40293c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402943:	00 00 00 
  402946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40294d:	00 00 00 
  402950:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402957:	00 00 00 
  40295a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402961:	00 00 00 
  402964:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40296b:	00 00 00 
  40296e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402975:	00 00 00 
  402978:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40297f:	00 00 00 
  402982:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402989:	00 00 00 
  40298c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402993:	00 00 00 
  402996:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40299d:	00 00 00 
  4029a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029a7:	00 00 00 
  4029aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029b1:	00 00 00 
  4029b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029bb:	00 00 00 
  4029be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029c5:	00 00 00 
  4029c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029cf:	00 00 00 
  4029d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029d9:	00 00 00 
  4029dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029e3:	00 00 00 
  4029e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029ed:	00 00 00 
  4029f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4029f7:	00 00 00 
  4029fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a01:	00 00 00 
  402a04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a0b:	00 00 00 
  402a0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a15:	00 00 00 
  402a18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a1f:	00 00 00 
  402a22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a29:	00 00 00 
  402a2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a33:	00 00 00 
  402a36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a3d:	00 00 00 
  402a40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a47:	00 00 00 
  402a4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a51:	00 00 00 
  402a54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a5b:	00 00 00 
  402a5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a65:	00 00 00 
  402a68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a6f:	00 00 00 
  402a72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a79:	00 00 00 
  402a7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a83:	00 00 00 
  402a86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a8d:	00 00 00 
  402a90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402a97:	00 00 00 
  402a9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402aa1:	00 00 00 
  402aa4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402aab:	00 00 00 
  402aae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ab5:	00 00 00 
  402ab8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402abf:	00 00 00 
  402ac2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ac9:	00 00 00 
  402acc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ad3:	00 00 00 
  402ad6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402add:	00 00 00 
  402ae0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ae7:	00 00 00 
  402aea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402af1:	00 00 00 
  402af4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402afb:	00 00 00 
  402afe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b05:	00 00 00 
  402b08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b0f:	00 00 00 
  402b12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b19:	00 00 00 
  402b1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b23:	00 00 00 
  402b26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b2d:	00 00 00 
  402b30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b37:	00 00 00 
  402b3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b41:	00 00 00 
  402b44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b4b:	00 00 00 
  402b4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b55:	00 00 00 
  402b58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b5f:	00 00 00 
  402b62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b69:	00 00 00 
  402b6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b73:	00 00 00 
  402b76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b7d:	00 00 00 
  402b80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b87:	00 00 00 
  402b8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b91:	00 00 00 
  402b94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402b9b:	00 00 00 
  402b9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ba5:	00 00 00 
  402ba8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402baf:	00 00 00 
  402bb2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402bb9:	00 00 00 
  402bbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402bc3:	00 00 00 
  402bc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402bcd:	00 00 00 
  402bd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402bd7:	00 00 00 
  402bda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402be1:	00 00 00 
  402be4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402beb:	00 00 00 
  402bee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402bf5:	00 00 00 
  402bf8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402bff:	00 00 00 
  402c02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c09:	00 00 00 
  402c0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c13:	00 00 00 
  402c16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c1d:	00 00 00 
  402c20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c27:	00 00 00 
  402c2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c31:	00 00 00 
  402c34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c3b:	00 00 00 
  402c3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c45:	00 00 00 
  402c48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c4f:	00 00 00 
  402c52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c59:	00 00 00 
  402c5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c63:	00 00 00 
  402c66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c6d:	00 00 00 
  402c70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c77:	00 00 00 
  402c7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c81:	00 00 00 
  402c84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c8b:	00 00 00 
  402c8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c95:	00 00 00 
  402c98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402c9f:	00 00 00 
  402ca2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ca9:	00 00 00 
  402cac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402cb3:	00 00 00 
  402cb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402cbd:	00 00 00 
  402cc0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402cc7:	00 00 00 
  402cca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402cd1:	00 00 00 
  402cd4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402cdb:	00 00 00 
  402cde:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ce5:	00 00 00 
  402ce8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402cef:	00 00 00 
  402cf2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402cf9:	00 00 00 
  402cfc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d03:	00 00 00 
  402d06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d0d:	00 00 00 
  402d10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d17:	00 00 00 
  402d1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d21:	00 00 00 
  402d24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d2b:	00 00 00 
  402d2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d35:	00 00 00 
  402d38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d3f:	00 00 00 
  402d42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d49:	00 00 00 
  402d4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d53:	00 00 00 
  402d56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d5d:	00 00 00 
  402d60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d67:	00 00 00 
  402d6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d71:	00 00 00 
  402d74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d7b:	00 00 00 
  402d7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d85:	00 00 00 
  402d88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d8f:	00 00 00 
  402d92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402d99:	00 00 00 
  402d9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402da3:	00 00 00 
  402da6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402dad:	00 00 00 
  402db0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402db7:	00 00 00 
  402dba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402dc1:	00 00 00 
  402dc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402dcb:	00 00 00 
  402dce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402dd5:	00 00 00 
  402dd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ddf:	00 00 00 
  402de2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402de9:	00 00 00 
  402dec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402df3:	00 00 00 
  402df6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402dfd:	00 00 00 
  402e00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e07:	00 00 00 
  402e0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e11:	00 00 00 
  402e14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e1b:	00 00 00 
  402e1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e25:	00 00 00 
  402e28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e2f:	00 00 00 
  402e32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e39:	00 00 00 
  402e3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e43:	00 00 00 
  402e46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e4d:	00 00 00 
  402e50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e57:	00 00 00 
  402e5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e61:	00 00 00 
  402e64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e6b:	00 00 00 
  402e6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e75:	00 00 00 
  402e78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e7f:	00 00 00 
  402e82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e89:	00 00 00 
  402e8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e93:	00 00 00 
  402e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e9d:	00 00 00 
  402ea0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ea7:	00 00 00 
  402eaa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402eb1:	00 00 00 
  402eb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ebb:	00 00 00 
  402ebe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ec5:	00 00 00 
  402ec8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ecf:	00 00 00 
  402ed2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ed9:	00 00 00 
  402edc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ee3:	00 00 00 
  402ee6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402eed:	00 00 00 
  402ef0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ef7:	00 00 00 
  402efa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f01:	00 00 00 
  402f04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f0b:	00 00 00 
  402f0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f15:	00 00 00 
  402f18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f1f:	00 00 00 
  402f22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f29:	00 00 00 
  402f2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f33:	00 00 00 
  402f36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f3d:	00 00 00 
  402f40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f47:	00 00 00 
  402f4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f51:	00 00 00 
  402f54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f5b:	00 00 00 
  402f5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f65:	00 00 00 
  402f68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f6f:	00 00 00 
  402f72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f79:	00 00 00 
  402f7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f83:	00 00 00 
  402f86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f8d:	00 00 00 
  402f90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402f97:	00 00 00 
  402f9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fa1:	00 00 00 
  402fa4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fab:	00 00 00 
  402fae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fb5:	00 00 00 
  402fb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fbf:	00 00 00 
  402fc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fc9:	00 00 00 
  402fcc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fd3:	00 00 00 
  402fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fdd:	00 00 00 
  402fe0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402fe7:	00 00 00 
  402fea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ff1:	00 00 00 
  402ff4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402ffb:	00 00 00 
  402ffe:	66 90                	xchg   %ax,%ax
  403000:	68 6f 6c 61 00       	pushq  $0x616c6f
  403005:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40300c:	00 00 00 
  40300f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  403016:	00 00 00 
  403019:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  403020:	00 00 00 
  403023:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40302a:	00 00 00 
  40302d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  403034:	00 00 00 
  403037:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40303e:	00 00 

0000000000403040 <boardTemplate>:
  403040:	03 00 00 00 00 00 00 00 06 00 00 00 05 00 00 00     ................
  403050:	00 00 00 00 08 00 00 00 04 00 00 00 00 00 00 00     ................
  403060:	00 00 00 00 05 00 00 00 02 00 00 00 00 00 00 00     ................
	...
  40308c:	08 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00     ................
	...
  4030a4:	03 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
  4030b4:	03 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00     ................
  4030c4:	00 00 00 00 08 00 00 00 00 00 00 00 09 00 00 00     ................
	...
  4030dc:	08 00 00 00 06 00 00 00 03 00 00 00 00 00 00 00     ................
  4030ec:	00 00 00 00 05 00 00 00 00 00 00 00 05 00 00 00     ................
	...
  403104:	09 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00     ................
  403114:	00 00 00 00 01 00 00 00 03 00 00 00 00 00 00 00     ................
	...
  403130:	02 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00     ................
	...
  403158:	07 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00     ................
  403168:	05 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00     ................
  403178:	03 00 00 00 00 00 00 00 00 00 00 00 20 20 20 20     ............    
  403188:	20 20 20 20 00 20 2b 2d 2d 2d 2d 2d 2d 2d 2d 2d         . +---------
  403198:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2b 0a 00 7c 20 00     ----------+..| .
  4031a8:	20 7c 00 20 20 20 31 20 32 20 33 20 34 20 35 20      |.   1 2 3 4 5 
  4031b8:	36 20 37 20 38 20 39 00 45 6c 20 6e 75 6d 65 72     6 7 8 9.El numer
  4031c8:	6f 20 65 73 20 69 6e 76 61 6c 69 64 6f 0a 00 90     o es invalido...

00000000004031d8 <video>:
  4031d8:	00 80 0b 00 00 00 00 00                             ........

00000000004031e0 <width>:
  4031e0:	50 00 00 00                                         P...

00000000004031e4 <height>:
  4031e4:	19 00 00 00 53 48 45 4c 4c 3e 3a 24 20 00 48 6f     ....SHELL>:$ .Ho
  4031f4:	6c 61 00 50 72 69 6e 74 65 61 20 48 6f 6c 61 00     la.Printea Hola.
  403204:	48 6f 6c 61 50 00 00 00 00 00 00 00 73 74 61 72     HolaP.......star
  403214:	74 73 20 6d 75 6c 74 69 70 6c 65 20 77 69 6e 64     ts multiple wind
  403224:	6f 77 20 65 6e 76 69 72 6f 6e 6d 65 6e 74 00 6d     ow environment.m
  403234:	75 6c 74 69 70 6c 65 00 64 69 73 70 6c 61 79 73     ultiple.displays
  403244:	20 74 68 65 20 64 61 74 65 20 61 6e 64 20 74 69      the date and ti
  403254:	6d 65 00 64 61 74 65 74 69 6d 65 00 43 6f 6d 61     me.datetime.Coma
  403264:	6e 64 6f 20 69 6e 76 61 6c 69 64 6f 00 66 2e 0f     ndo invalido.f..
  403274:	1f 84 00 00 00 00 00 0f 1f 44 00 00                 .........D..

0000000000403280 <windowChange>:
  403280:	02 00 00 00 02 00 00 00 01 00 00 00 01 00 00 00     ................
  403290:	03 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00     ................
	...
  4032a8:	03 00 00 00 03 00 00 00 01 00 00 00 01 00 00 00     ................
  4032b8:	02 00 00 00 02 00 00 00 20 20 20 20 20 20 20 20     ........        
  4032c8:	20 20 20 20 20 20 20 20 00 73 74 61 72 74 00 73             .start.s
  4032d8:	74 6f 70 00 72 65 73 65 74 00 45 6e 74 72 61 64     top.reset.Entrad
  4032e8:	61 20 69 6e 76 61 6c 69 64 61 00 73 6f 6c 76 65     a invalida.solve
	...
  403300:	45 6c 20 63 61 72 61 63 74 65 72 20 69 6e 67 72     El caracter ingr
  403310:	65 73 61 64 6f 20 6e 6f 20 65 73 20 75 6e 61 20     esado no es una 
  403320:	6c 65 74 72 61 20 76 61 6c 69 64 61 00 53 65 20     letra valida.Se 
  403330:	69 6e 67 72 65 73 6f 20 6d 61 73 20 64 65 20 75     ingreso mas de u
  403340:	6e 61 20 6c 65 74 72 61 00 00 00 00 00 00 00 00     na letra........
  403350:	46 65 6c 69 63 69 74 61 63 69 6f 6e 65 73 21 20     Felicitaciones! 
  403360:	4a 75 65 67 6f 20 74 65 72 6d 69 6e 61 64 6f 00     Juego terminado.
  403370:	4c 61 20 6c 65 74 72 61 20 79 61 20 66 75 65 20     La letra ya fue 
  403380:	75 73 61 64 61 00 48 61 20 70 65 72 64 69 64 6f     usada.Ha perdido
  403390:	20 65 6c 20 6a 75 65 67 6f 2e 00 00 00 00 00 00      el juego.......
  4033a0:	a2 24 40 00 00 00 00 00 2f 24 40 00 00 00 00 00     .$@...../$@.....
  4033b0:	46 24 40 00 00 00 00 00 5d 24 40 00 00 00 00 00     F$@.....]$@.....
  4033c0:	74 24 40 00 00 00 00 00 8b 24 40 00 00 00 00 00     t$@......$@.....
  4033d0:	56 61 6c 6f 72 65 73 20 66 75 65 72 61 20 64 65     Valores fuera de
  4033e0:	20 72 61 6e 67 6f 00 00 4e 6f 20 73 65 20 70 75      rango..No se pu
  4033f0:	65 64 65 6e 20 6d 6f 64 69 66 69 63 61 72 20 6c     eden modificar l
  403400:	6f 73 20 76 65 72 64 65 73 00 4a 75 67 61 64 61     os verdes.Jugada
  403410:	20 69 6e 76 61 6c 69 64 61 00 46 65 6c 69 63 69      invalida.Felici
  403420:	74 61 63 69 6f 6e 65 73 21 00                       taciones!.
